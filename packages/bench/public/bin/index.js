/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/program/index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../smoke-node/public/bin/async/barrier.js":
/*!*************************************************!*\
  !*** ../smoke-node/public/bin/async/barrier.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * An asynchronous barrier used to defer operations until a condition is meet.\n * This type is primarily  used to allow callers to invoke operations on a\n * type without waiting for that type to initialize internally. This type\n * provides pause and resume functionality. New instances of this type will\n * start in a paused state.\n */\nclass Barrier {\n    constructor() {\n        this.awaiters = [];\n        this.paused = true;\n    }\n    /** Pauses this barrier causing operations to wait. */\n    pause() {\n        this.paused = true;\n    }\n    /** Resumes this barrier causing all operations to run. */\n    resume() {\n        this.paused = false;\n        this.dispatch();\n    }\n    /** Schedules the given operation to run when resumed. */\n    run(func) {\n        return (!this.paused)\n            ? Promise.resolve(func())\n            : new Promise((resolve, reject) => {\n                this.awaiters.push({\n                    func: func,\n                    resolve,\n                    reject\n                });\n            });\n    }\n    /** Dispatches all awaiters. Called exclusively by resume() */\n    async dispatch() {\n        while (this.awaiters.length > 0) {\n            const awaiter = this.awaiters.shift();\n            Promise.resolve(awaiter.func())\n                .then(result => awaiter.resolve(result))\n                .catch(error => awaiter.reject(error));\n        }\n    }\n}\nexports.Barrier = Barrier;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/async/barrier.js?");

/***/ }),

/***/ "../smoke-node/public/bin/async/deferred.js":
/*!**************************************************!*\
  !*** ../smoke-node/public/bin/async/deferred.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * An asynchronous deferral mechanism. This type allows callers to register a\n * Promise with a key and provides functionality to resolve or reject the key\n * with a value at a later time.\n *\n * This type is used in scenarios where a messages are passed over a channel\n * with the expectation of that channel responding in a request response\n * fashion. In these scenarios, A key can be registered on this type,\n * and resolved accordingly when the channel responds.\n */\nclass Deferred {\n    constructor() {\n        this.awaiters = new Map();\n    }\n    /** Schedules a id for later resolution. */\n    wait(key) {\n        return new Promise((resolve, reject) => {\n            if (this.awaiters.has(key)) {\n                this.reject(key, 'Overlapping deferred identifier. Rejecting.');\n            }\n            this.awaiters.set(key, { resolve, reject });\n        });\n    }\n    /** Resolves this identifer with the given value. */\n    resolve(key, value) {\n        if (this.awaiters.has(key)) {\n            const awaiter = this.awaiters.get(key);\n            awaiter.resolve(value);\n            this.awaiters.delete(key);\n        }\n    }\n    /** Rejects this identifer with the given value. */\n    reject(key, reason) {\n        if (this.awaiters.has(key)) {\n            const awaiter = this.awaiters.get(key);\n            awaiter.reject(new Error(reason));\n            this.awaiters.delete(key);\n        }\n    }\n}\nexports.Deferred = Deferred;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/async/deferred.js?");

/***/ }),

/***/ "../smoke-node/public/bin/async/events.js":
/*!************************************************!*\
  !*** ../smoke-node/public/bin/async/events.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * A single channel event emitter. This type supports standard event\n * subscription functionality with the ability to queue messages when there are\n * no subscribers available to receive.\n */\nclass Event {\n    constructor() {\n        this.handlers = [];\n        this.messages = [];\n    }\n    /** Subscribes to an event once. */\n    once(func) {\n        this.handlers.push({ once: true, func });\n        this.dispatch();\n    }\n    /** Subscribes to an event. */\n    on(func) {\n        this.handlers.push({ once: false, func });\n        this.dispatch();\n    }\n    /** Unsubscribes this handler. */\n    remove(func) {\n        this.handlers = this.handlers.filter(handler => handler.func != func);\n    }\n    /** Emits a message to subscribers. */\n    emit(data) {\n        this.messages.push(data);\n        this.dispatch();\n    }\n    dispatch() {\n        while (this.messages.length > 0 && this.handlers.length > 0) {\n            const message = this.messages.shift();\n            const onces = this.handlers.filter(listener => listener.once);\n            const ons = this.handlers.filter(listener => !listener.once);\n            this.handlers = [...ons];\n            onces.forEach(listener => listener.func(message));\n            ons.forEach(listener => listener.func(message));\n        }\n    }\n    /** Disposes of this object.  */\n    dispose() {\n        while (this.handlers.length > 0) {\n            this.handlers.shift();\n        }\n        while (this.messages.length > 0) {\n            this.messages.shift();\n        }\n    }\n}\n/**\n * A multi channel event emitter. This type supports standard event\n * subscription functionality with the ability to queue messages when there are\n * no subscribers available to receive.\n */\nclass Events {\n    constructor() {\n        this.events = new Map();\n    }\n    /** Subscribes to an event once. */\n    once(event, func) {\n        if (!this.events.has(event)) {\n            this.events.set(event, new Event());\n        }\n        this.events.get(event).once(func);\n    }\n    /** Subscribes to an event. */\n    on(event, func) {\n        if (!this.events.has(event)) {\n            this.events.set(event, new Event());\n        }\n        this.events.get(event).on(func);\n    }\n    /** Removes this event handler. */\n    remove(event, func) {\n        if (!this.events.has(event)) {\n            this.events.set(event, new Event());\n        }\n        this.events.get(event).remove(func);\n    }\n    /** Emits an event to subscribers. */\n    emit(event, data) {\n        if (event === 'error' && !this.events.has(event)) {\n            throw data;\n        }\n        if (!this.events.has(event)) {\n            this.events.set(event, new Event());\n        }\n        this.events.get(event).emit(data);\n    }\n    /** Disposes of this object. */\n    dispose() {\n        for (const key of this.events.keys()) {\n            const event = this.events.get(key);\n            this.events.delete(key);\n            event.dispose();\n        }\n    }\n}\nexports.Events = Events;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/async/events.js?");

/***/ }),

/***/ "../smoke-node/public/bin/async/index.js":
/*!***********************************************!*\
  !*** ../smoke-node/public/bin/async/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar events_1 = __webpack_require__(/*! ./events */ \"../smoke-node/public/bin/async/events.js\");\nexports.Events = events_1.Events;\nvar deferred_1 = __webpack_require__(/*! ./deferred */ \"../smoke-node/public/bin/async/deferred.js\");\nexports.Deferred = deferred_1.Deferred;\nvar barrier_1 = __webpack_require__(/*! ./barrier */ \"../smoke-node/public/bin/async/barrier.js\");\nexports.Barrier = barrier_1.Barrier;\nvar semaphore_1 = __webpack_require__(/*! ./semaphore */ \"../smoke-node/public/bin/async/semaphore.js\");\nexports.Semaphore = semaphore_1.Semaphore;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/async/index.js?");

/***/ }),

/***/ "../smoke-node/public/bin/async/semaphore.js":
/*!***************************************************!*\
  !*** ../smoke-node/public/bin/async/semaphore.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * An asynchronous semaphore. Provides functionality to limit and sequence\n * asynchonous access on a resource.\n */\nclass Semaphore {\n    /** Creates a Semaphore with the given concurrency limit. */\n    constructor(concurrency = 1) {\n        this.concurrency = concurrency;\n        this.awaiters = [];\n        this.running = 0;\n    }\n    /** Schedules this operation to run. */\n    run(func) {\n        return new Promise((resolve, reject) => {\n            this.awaiters.push({ func, resolve, reject });\n            this.dispatch();\n        });\n    }\n    /** (async-recursive) Dispatchs operations to the configured concurrency limit. */\n    async dispatch() {\n        if (this.awaiters.length === 0 || this.running >= this.concurrency) {\n            return;\n        }\n        const awaiter = this.awaiters.shift();\n        this.running += 1;\n        try {\n            awaiter.resolve(await awaiter.func());\n            setTimeout(() => {\n                this.running -= 1;\n                this.dispatch();\n            }, 1);\n        }\n        catch (error) {\n            awaiter.reject(error);\n            setTimeout(() => {\n                this.running -= 1;\n                this.dispatch();\n            }, 1);\n        }\n    }\n}\nexports.Semaphore = Semaphore;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/async/semaphore.js?");

/***/ }),

/***/ "../smoke-node/public/bin/buffer/base64.js":
/*!*************************************************!*\
  !*** ../smoke-node/public/bin/buffer/base64.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/* ---------------------------------------------------------------------------\n\nThe MIT License (MIT)\n\nCopyright (c) 2014\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n--------------------------------------------------------------------------- */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst lookup = [];\nconst revLookup = [];\nconst Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\nconst code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\nfor (let i = 0, len = code.length; i < len; ++i) {\n    lookup[i] = code[i];\n    revLookup[code.charCodeAt(i)] = i;\n}\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62;\nrevLookup['_'.charCodeAt(0)] = 63;\nfunction getLens(b64) {\n    const len = b64.length;\n    if (len % 4 > 0) {\n        throw new Error('Invalid string. Length must be a multiple of 4');\n    }\n    // Trim off extra bytes after placeholder bytes are found\n    // See: https://github.com/beatgammit/base64-js/issues/42\n    let validLen = b64.indexOf('=');\n    if (validLen === -1)\n        validLen = len;\n    const placeHoldersLen = validLen === len ? 0 : 4 - (validLen % 4);\n    return [validLen, placeHoldersLen];\n}\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength(b64) {\n    const lens = getLens(b64);\n    const validLen = lens[0];\n    const placeHoldersLen = lens[1];\n    return ((validLen + placeHoldersLen) * 3) / 4 - placeHoldersLen;\n}\nexports.byteLength = byteLength;\nfunction _byteLength(validLen, placeHoldersLen) {\n    return ((validLen + placeHoldersLen) * 3) / 4 - placeHoldersLen;\n}\nfunction toByteArray(b64) {\n    const lens = getLens(b64);\n    const validLen = lens[0];\n    const placeHoldersLen = lens[1];\n    const arr = new Arr(_byteLength(validLen, placeHoldersLen));\n    let tmp;\n    let curByte = 0;\n    // if there are placeholders, only get up to the last complete 4 chars\n    const len = placeHoldersLen > 0 ? validLen - 4 : validLen;\n    for (var i = 0; i < len; i += 4) {\n        tmp = (revLookup[b64.charCodeAt(i)] << 18) |\n            (revLookup[b64.charCodeAt(i + 1)] << 12) |\n            (revLookup[b64.charCodeAt(i + 2)] << 6) |\n            revLookup[b64.charCodeAt(i + 3)];\n        arr[curByte++] = (tmp >> 16) & 0xff;\n        arr[curByte++] = (tmp >> 8) & 0xff;\n        arr[curByte++] = tmp & 0xff;\n    }\n    if (placeHoldersLen === 2) {\n        tmp = (revLookup[b64.charCodeAt(i)] << 2) |\n            (revLookup[b64.charCodeAt(i + 1)] >> 4);\n        arr[curByte++] = tmp & 0xff;\n    }\n    if (placeHoldersLen === 1) {\n        tmp = (revLookup[b64.charCodeAt(i)] << 10) |\n            (revLookup[b64.charCodeAt(i + 1)] << 4) |\n            (revLookup[b64.charCodeAt(i + 2)] >> 2);\n        arr[curByte++] = (tmp >> 8) & 0xff;\n        arr[curByte++] = tmp & 0xff;\n    }\n    return arr;\n}\nexports.toByteArray = toByteArray;\nfunction tripletToBase64(num) {\n    return (lookup[(num >> 18) & 0x3f] +\n        lookup[(num >> 12) & 0x3f] +\n        lookup[(num >> 6) & 0x3f] +\n        lookup[num & 0x3f]);\n}\nexports.tripletToBase64 = tripletToBase64;\nfunction encodeChunk(uint8, start, end) {\n    let tmp;\n    const output = [];\n    for (let i = start; i < end; i += 3) {\n        tmp =\n            ((uint8[i] << 16) & 0xff0000) +\n                ((uint8[i + 1] << 8) & 0xff00) +\n                (uint8[i + 2] & 0xff);\n        output.push(tripletToBase64(tmp));\n    }\n    return output.join('');\n}\nexports.encodeChunk = encodeChunk;\nfunction fromByteArray(uint8) {\n    let tmp;\n    const len = uint8.length;\n    const extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\n    const parts = [];\n    const maxChunkLength = 16383; // must be multiple of 3\n    // go through the array every three bytes, we'll deal with trailing stuff later\n    for (let i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n        parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));\n    }\n    // pad the end with zeros, but make sure to not forget the extra bytes\n    if (extraBytes === 1) {\n        tmp = uint8[len - 1];\n        parts.push(lookup[tmp >> 2] + lookup[(tmp << 4) & 0x3f] + '==');\n    }\n    else if (extraBytes === 2) {\n        tmp = (uint8[len - 2] << 8) + uint8[len - 1];\n        parts.push(lookup[tmp >> 10] +\n            lookup[(tmp >> 4) & 0x3f] +\n            lookup[(tmp << 2) & 0x3f] +\n            '=');\n    }\n    return parts.join('');\n}\nexports.fromByteArray = fromByteArray;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/buffer/base64.js?");

/***/ }),

/***/ "../smoke-node/public/bin/buffer/buffer.js":
/*!*************************************************!*\
  !*** ../smoke-node/public/bin/buffer/buffer.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019\n- Feross Aboukhadijeh <https://feross.org> - Original Work\n- Haydn Paterson (sinclair) <haydn.developer@gmail.com> - TypeScript Port\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ieee754 = __webpack_require__(/*! ./ieee754 */ \"../smoke-node/public/bin/buffer/ieee754.js\");\nconst base64 = __webpack_require__(/*! ./base64 */ \"../smoke-node/public/bin/buffer/base64.js\");\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with the\n// lowest limit is Chrome, with 0x10000 args. We go 1 magnitude less, for\n// safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000;\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;\nconst INSPECT_MAX_BYTES = 50;\nconst K_MAX_LENGTH = 0x7fffffff;\n/**\n * A Buffer implementation mirrors the Buffer type from NodeJS. Provides buffer\n * read/write functionality for native numeric types, slicing and concat as\n * well as text encoding functionality. Ported from to TypeScript from\n * https://github.com/feross/buffer.\n */\nclass Buffer extends Uint8Array {\n    // #region swap\n    static swap(buf, n, m) {\n        const i = buf[n];\n        buf[n] = buf[m];\n        buf[m] = i;\n    }\n    swap16() {\n        const len = this.length;\n        if (len % 2 !== 0) {\n            throw new RangeError('Buffer size must be a multiple of 16-bits');\n        }\n        for (let i = 0; i < len; i += 2) {\n            Buffer.swap(this, i, i + 1);\n        }\n        return this;\n    }\n    swap32() {\n        const len = this.length;\n        if (len % 4 !== 0) {\n            throw new RangeError('Buffer size must be a multiple of 32-bits');\n        }\n        for (let i = 0; i < len; i += 4) {\n            Buffer.swap(this, i, i + 3);\n            Buffer.swap(this, i + 1, i + 2);\n        }\n        return this;\n    }\n    swap64() {\n        const len = this.length;\n        if (len % 8 !== 0) {\n            throw new RangeError('Buffer size must be a multiple of 64-bits');\n        }\n        for (let i = 0; i < len; i += 8) {\n            Buffer.swap(this, i, i + 7);\n            Buffer.swap(this, i + 1, i + 6);\n            Buffer.swap(this, i + 2, i + 5);\n            Buffer.swap(this, i + 3, i + 4);\n        }\n        return this;\n    }\n    // #region toString\n    slowToString(...args) {\n        let loweredCase = false;\n        // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n        // property of a typed array.\n        // This behaves neither like String nor Uint8Array in that we set start/end\n        // to their upper/lower bounds if the value passed is out of range.\n        // undefined is handled specially as per ECMA-262 6th Edition,\n        // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n        if (args[1] === undefined || args[1] < 0) {\n            args[1] = 0;\n        }\n        // Return early if start > this.length. Done here to prevent potential uint32\n        // coercion fail below.\n        if (args[1] > this.length) {\n            return '';\n        }\n        if (args[2] === undefined || args[2] > this.length) {\n            args[2] = this.length;\n        }\n        if (args[2] <= 0) {\n            return '';\n        }\n        // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n        args[2] >>>= 0;\n        args[1] >>>= 0;\n        if (args[2] <= args[1]) {\n            return '';\n        }\n        if (!args[0]) {\n            args[0] = 'utf8';\n        }\n        while (true) {\n            switch (args[0]) {\n                case 'hex':\n                    return Buffer.hexSlice(this, args[1], args[2]);\n                case 'utf8':\n                case 'utf-8':\n                    return Buffer.utf8Slice(this, args[1], args[2]);\n                case 'ascii':\n                    return Buffer.asciiSlice(this, args[1], args[2]);\n                case 'latin1':\n                case 'binary':\n                    return Buffer.latin1Slice(this, args[1], args[2]);\n                case 'base64':\n                    return Buffer.base64Slice(this, args[1], args[2]);\n                case 'ucs2':\n                case 'ucs-2':\n                case 'utf16le':\n                case 'utf-16le':\n                    return Buffer.utf16leSlice(this, args[1], args[2]);\n                default:\n                    if (loweredCase) {\n                        throw new TypeError('Unknown encoding: ' + args[0]);\n                    }\n                    args[0] = (args[0] + '').toLowerCase();\n                    loweredCase = true;\n            }\n        }\n    }\n    toString(...args) {\n        const length = this.length;\n        if (length === 0) {\n            return '';\n        }\n        else if (args.length === 0) {\n            return Buffer.utf8Slice(this, 0, length);\n        }\n        else {\n            return this.slowToString(...args);\n        }\n    }\n    toLocaleString(...args) {\n        return this.toString(...args);\n    }\n    // #region equals\n    equals(buf) {\n        if (!Buffer.isBuffer(buf)) {\n            throw new TypeError('Argument must be a Buffer');\n        }\n        if (this === buf)\n            return true;\n        return Buffer.compare(this, buf) === 0;\n    }\n    // #region inspect\n    inspect() {\n        let str = '';\n        const max = INSPECT_MAX_BYTES;\n        str = this.toString('hex', 0, max)\n            .replace(/(.{2})/g, '$1 ')\n            .trim();\n        if (this.length > max)\n            str += ' ... ';\n        return '<Buffer ' + str + '>';\n    }\n    compare(...args) {\n        if (Buffer.isInstance(args[0], Uint8Array)) {\n            args[0] = Buffer.from(args[0], args[0].offset, args[0].byteLength);\n        }\n        if (!Buffer.isBuffer(args[0])) {\n            throw new TypeError('The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n                'Received type ' +\n                typeof args[0]);\n        }\n        if (args[1] === undefined) {\n            args[1] = 0;\n        }\n        if (args[2] === undefined) {\n            args[2] = args[0] ? args[0].length : 0;\n        }\n        if (args[3] === undefined) {\n            args[3] = 0;\n        }\n        if (args[4] === undefined) {\n            args[4] = this.length;\n        }\n        if (args[1] < 0 ||\n            args[2] > args[0].length ||\n            args[3] < 0 ||\n            args[4] > this.length) {\n            throw new RangeError('out of range index');\n        }\n        if (args[3] >= args[4] && args[1] >= args[2]) {\n            return 0;\n        }\n        if (args[3] >= args[4]) {\n            return -1;\n        }\n        if (args[1] >= args[2]) {\n            return 1;\n        }\n        args[1] >>>= 0;\n        args[2] >>>= 0;\n        args[3] >>>= 0;\n        args[4] >>>= 0;\n        if (this === args[0]) {\n            return 0;\n        }\n        let x = args[4] - args[3];\n        let y = args[2] - args[1];\n        const len = Math.min(x, y);\n        const thisCopy = this.slice(args[3], args[4]);\n        const targetCopy = args[0].slice(args[1], args[2]);\n        for (let i = 0; i < len; ++i) {\n            if (thisCopy[i] !== targetCopy[i]) {\n                x = thisCopy[i];\n                y = targetCopy[i];\n                break;\n            }\n        }\n        if (x < y)\n            return -1;\n        if (y < x)\n            return 1;\n        return 0;\n    }\n    // #region indexOf\n    static arrayIndexOf(arr, val, byteOffset, encoding, dir) {\n        let indexSize = 1;\n        let arrLength = arr.length;\n        let valLength = val.length;\n        if (encoding !== undefined) {\n            encoding = String(encoding).toLowerCase();\n            if (encoding === 'ucs2' ||\n                encoding === 'ucs-2' ||\n                encoding === 'utf16le' ||\n                encoding === 'utf-16le') {\n                if (arr.length < 2 || val.length < 2) {\n                    return -1;\n                }\n                indexSize = 2;\n                arrLength /= 2;\n                valLength /= 2;\n                byteOffset /= 2;\n            }\n        }\n        function read(buf, i) {\n            if (indexSize === 1) {\n                return buf[i];\n            }\n            else {\n                return buf.readUInt16BE(i * indexSize);\n            }\n        }\n        let i;\n        if (dir) {\n            let foundIndex = -1;\n            for (i = byteOffset; i < arrLength; i++) {\n                if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n                    if (foundIndex === -1)\n                        foundIndex = i;\n                    if (i - foundIndex + 1 === valLength)\n                        return foundIndex * indexSize;\n                }\n                else {\n                    if (foundIndex !== -1)\n                        i -= i - foundIndex;\n                    foundIndex = -1;\n                }\n            }\n        }\n        else {\n            if (byteOffset + valLength > arrLength)\n                byteOffset = arrLength - valLength;\n            for (i = byteOffset; i >= 0; i--) {\n                let found = true;\n                for (let j = 0; j < valLength; j++) {\n                    if (read(arr, i + j) !== read(val, j)) {\n                        found = false;\n                        break;\n                    }\n                }\n                if (found)\n                    return i;\n            }\n        }\n        return -1;\n    }\n    static bidirectionalIndexOf(...args) {\n        // Empty buffer means no match\n        if (args[0].length === 0)\n            return -1;\n        // Normalize byteOffset\n        if (typeof args[2] === 'string') {\n            args[3] = args[2];\n            args[2] = 0;\n        }\n        else if (args[2] > 0x7fffffff) {\n            args[2] = 0x7fffffff;\n        }\n        else if (args[2] < -0x80000000) {\n            args[2] = -0x80000000;\n        }\n        args[2] = +args[2]; // Coerce to Number.\n        if (Buffer.numberIsNaN(args[2])) {\n            // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n            args[2] = args[4] ? 0 : args[0].length - 1;\n        }\n        // Normalize byteOffset: negative offsets start from the end of the buffer\n        if (args[2] < 0)\n            args[2] = args[0].length + args[2];\n        if (args[2] >= args[0].length) {\n            if (args[4])\n                return -1;\n            else\n                args[2] = args[0].length - 1;\n        }\n        else if (args[2] < 0) {\n            if (args[4])\n                args[2] = 0;\n            else\n                return -1;\n        }\n        // Normalize val\n        if (typeof args[1] === 'string') {\n            args[1] = Buffer.from(args[1], args[3]);\n        }\n        // Finally, search either indexOf (if dir is true) or lastIndexOf\n        if (Buffer.isBuffer(args[1])) {\n            // Special case: looking for empty string/buffer always fails\n            if (args[1].length === 0) {\n                return -1;\n            }\n            return Buffer.arrayIndexOf(args[0], args[1], args[2], args[3], args[4]);\n        }\n        else if (typeof args[1] === 'number') {\n            args[1] = args[1] & 0xff; // Search for a byte value [0-255]\n            if (typeof Uint8Array.prototype.indexOf === 'function') {\n                if (args[4]) {\n                    return Uint8Array.prototype.indexOf.call(args[0], args[1], args[2]);\n                }\n                else {\n                    return Uint8Array.prototype.lastIndexOf.call(args[0], args[1], args[2]);\n                }\n            }\n            return Buffer.arrayIndexOf(args[0], [args[1]], args[2], args[3], args[4]);\n        }\n        throw new TypeError('val must be string, number or Buffer');\n    }\n    indexOf(val, byteOffset, encoding) {\n        return Buffer.bidirectionalIndexOf(this, val, byteOffset, encoding, true);\n    }\n    lastIndexOf(val, byteOffset, encoding) {\n        return Buffer.bidirectionalIndexOf(this, val, byteOffset, encoding, false);\n    }\n    // #region includes\n    includes(val, byteOffset, encoding) {\n        return this.indexOf(val, byteOffset, encoding) !== -1;\n    }\n    // #region toJSON\n    toJSON() {\n        const facade = this;\n        return {\n            type: 'Buffer',\n            data: Array.prototype.slice.call(facade._arr || facade, 0)\n        };\n    }\n    // #region slice\n    static base64Slice(buf, start, end) {\n        if (start === 0 && end === buf.length) {\n            return base64.fromByteArray(buf);\n        }\n        else {\n            return base64.fromByteArray(buf.slice(start, end));\n        }\n    }\n    static utf8Slice(buf, start, end) {\n        end = Math.min(buf.length, end);\n        const res = [];\n        let i = start;\n        while (i < end) {\n            const firstByte = buf[i];\n            let codePoint = null;\n            let bytesPerSequence = firstByte > 0xef ? 4 : firstByte > 0xdf ? 3 : firstByte > 0xbf ? 2 : 1;\n            if (i + bytesPerSequence <= end) {\n                let secondByte, thirdByte, fourthByte, tempCodePoint;\n                switch (bytesPerSequence) {\n                    case 1:\n                        if (firstByte < 0x80) {\n                            codePoint = firstByte;\n                        }\n                        break;\n                    case 2:\n                        secondByte = buf[i + 1];\n                        if ((secondByte & 0xc0) === 0x80) {\n                            tempCodePoint = ((firstByte & 0x1f) << 0x6) | (secondByte & 0x3f);\n                            if (tempCodePoint > 0x7f) {\n                                codePoint = tempCodePoint;\n                            }\n                        }\n                        break;\n                    case 3:\n                        secondByte = buf[i + 1];\n                        thirdByte = buf[i + 2];\n                        if ((secondByte & 0xc0) === 0x80 && (thirdByte & 0xc0) === 0x80) {\n                            tempCodePoint =\n                                ((firstByte & 0xf) << 0xc) |\n                                    ((secondByte & 0x3f) << 0x6) |\n                                    (thirdByte & 0x3f);\n                            if (tempCodePoint > 0x7ff &&\n                                (tempCodePoint < 0xd800 || tempCodePoint > 0xdfff)) {\n                                codePoint = tempCodePoint;\n                            }\n                        }\n                        break;\n                    case 4:\n                        secondByte = buf[i + 1];\n                        thirdByte = buf[i + 2];\n                        fourthByte = buf[i + 3];\n                        if ((secondByte & 0xc0) === 0x80 &&\n                            (thirdByte & 0xc0) === 0x80 &&\n                            (fourthByte & 0xc0) === 0x80) {\n                            tempCodePoint =\n                                ((firstByte & 0xf) << 0x12) |\n                                    ((secondByte & 0x3f) << 0xc) |\n                                    ((thirdByte & 0x3f) << 0x6) |\n                                    (fourthByte & 0x3f);\n                            if (tempCodePoint > 0xffff && tempCodePoint < 0x110000) {\n                                codePoint = tempCodePoint;\n                            }\n                        }\n                }\n            }\n            if (codePoint === null) {\n                // we did not generate a valid codePoint so insert a\n                // replacement char (U+FFFD) and advance only 1 byte\n                codePoint = 0xfffd;\n                bytesPerSequence = 1;\n            }\n            else if (codePoint > 0xffff) {\n                // encode to utf16 (surrogate pair dance)\n                codePoint -= 0x10000;\n                res.push(((codePoint >>> 10) & 0x3ff) | 0xd800);\n                codePoint = 0xdc00 | (codePoint & 0x3ff);\n            }\n            res.push(codePoint);\n            i += bytesPerSequence;\n        }\n        return Buffer.decodeCodePointsArray(res);\n    }\n    static decodeCodePointsArray(codePoints) {\n        const len = codePoints.length;\n        if (len <= MAX_ARGUMENTS_LENGTH) {\n            return String.fromCharCode.apply(String, codePoints); // avoid extra slice()\n        }\n        // Decode in chunks to avoid \"call stack size exceeded\".\n        let res = '';\n        let i = 0;\n        while (i < len) {\n            res += String.fromCharCode.apply(String, codePoints.slice(i, (i += MAX_ARGUMENTS_LENGTH)));\n        }\n        return res;\n    }\n    static asciiSlice(buf, start, end) {\n        let ret = '';\n        end = Math.min(buf.length, end);\n        for (let i = start; i < end; ++i) {\n            ret += String.fromCharCode(buf[i] & 0x7f);\n        }\n        return ret;\n    }\n    static latin1Slice(buf, start, end) {\n        let ret = '';\n        end = Math.min(buf.length, end);\n        for (let i = start; i < end; ++i) {\n            ret += String.fromCharCode(buf[i]);\n        }\n        return ret;\n    }\n    static hexSlice(buf, start, end) {\n        const len = buf.length;\n        if (!start || start < 0)\n            start = 0;\n        if (!end || end < 0 || end > len)\n            end = len;\n        let out = '';\n        for (let i = start; i < end; ++i) {\n            out += Buffer.toHex(buf[i]);\n        }\n        return out;\n    }\n    static utf16leSlice(buf, start, end) {\n        const bytes = buf.slice(start, end);\n        let res = '';\n        for (let i = 0; i < bytes.length; i += 2) {\n            res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);\n        }\n        return res;\n    }\n    slice(start, end) {\n        const len = this.length;\n        start = ~~start;\n        end = end === undefined ? len : ~~end;\n        if (start < 0) {\n            start += len;\n            if (start < 0)\n                start = 0;\n        }\n        else if (start > len) {\n            start = len;\n        }\n        if (end < 0) {\n            end += len;\n            if (end < 0)\n                end = 0;\n        }\n        else if (end > len) {\n            end = len;\n        }\n        if (end < start)\n            end = start;\n        // Return 'Uint8Array' augmented with 'Buffer' prototype.\n        let facade = this.subarray(start, end);\n        facade.__proto__ = Buffer.prototype;\n        return facade;\n    }\n    // #region copy\n    copy(target, targetStart, start, end) {\n        if (!Buffer.isBuffer(target))\n            throw new TypeError('argument should be a Buffer');\n        if (!start)\n            start = 0;\n        if (!end && end !== 0)\n            end = this.length;\n        if (targetStart >= target.length)\n            targetStart = target.length;\n        if (!targetStart)\n            targetStart = 0;\n        if (end > 0 && end < start)\n            end = start;\n        // Copy 0 bytes; we're done\n        if (end === start)\n            return 0;\n        if (target.length === 0 || this.length === 0)\n            return 0;\n        // Fatal error conditions\n        if (targetStart < 0) {\n            throw new RangeError('targetStart out of bounds');\n        }\n        if (start < 0 || start >= this.length)\n            throw new RangeError('Index out of range');\n        if (end < 0)\n            throw new RangeError('sourceEnd out of bounds');\n        // Are we oob?\n        if (end > this.length)\n            end = this.length;\n        if (target.length - targetStart < end - start) {\n            end = target.length - targetStart + start;\n        }\n        const len = end - start;\n        if (this === target &&\n            typeof Uint8Array.prototype.copyWithin === 'function') {\n            // Use built-in when available, missing from IE11\n            this.copyWithin(targetStart, start, end);\n        }\n        else if (this === target && start < targetStart && targetStart < end) {\n            // descending copy from end\n            for (let i = len - 1; i >= 0; --i) {\n                target[i + targetStart] = this[i + start];\n            }\n        }\n        else {\n            Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);\n        }\n        return len;\n    }\n    fill(...args) {\n        // Handle string cases:\n        if (typeof args[0] === 'string') {\n            if (typeof args[1] === 'string') {\n                args[3] = args[1];\n                args[1] = 0;\n                args[2] = this.length;\n            }\n            else if (typeof args[2] === 'string') {\n                args[3] = args[2];\n                args[2] = this.length;\n            }\n            if (args[3] !== undefined && typeof args[3] !== 'string') {\n                throw new TypeError('encoding must be a string');\n            }\n            if (typeof args[3] === 'string' && !Buffer.isEncoding(args[3])) {\n                throw new TypeError('Unknown encoding: ' + args[3]);\n            }\n            if (args[0].length === 1) {\n                const code = args[0].charCodeAt(0);\n                if ((args[3] === 'utf8' && code < 128) || args[3] === 'latin1') {\n                    // Fast path: If `val` fits into a single byte, use that numeric value.\n                    args[0] = code;\n                }\n            }\n        }\n        else if (typeof args[0] === 'number') {\n            args[0] = args[0] & 255;\n        }\n        // Invalid ranges are not set to a default, so can range check early.\n        if (args[1] < 0 || this.length < args[1] || this.length < args[2]) {\n            throw new RangeError('Out of range index');\n        }\n        if (args[2] <= args[1]) {\n            return this;\n        }\n        args[1] = args[1] >>> 0;\n        args[2] = args[2] === undefined ? this.length : args[2] >>> 0;\n        if (!args[0])\n            args[0] = 0;\n        let i;\n        if (typeof args[0] === 'number') {\n            for (i = args[1]; i < args[2]; ++i) {\n                this[i] = args[0];\n            }\n        }\n        else {\n            const bytes = Buffer.isBuffer(args[0])\n                ? args[0]\n                : Buffer.from(args[0], args[3]);\n            const len = bytes.length;\n            if (len === 0) {\n                throw new TypeError('The value \"' + args[0] + '\" is invalid for argument \"value\"');\n            }\n            for (i = 0; i < args[2] - args[1]; ++i) {\n                this[i + args[1]] = bytes[i % len];\n            }\n        }\n        return this;\n    }\n    // #region read: numerics\n    static checkOffset(offset, ext, length) {\n        if (offset % 1 !== 0 || offset < 0)\n            throw new RangeError('offset is not uint');\n        if (offset + ext > length)\n            throw new RangeError('Trying to access beyond Buffer length');\n    }\n    readUIntLE(offset, byteLength, noAssert) {\n        offset = offset >>> 0;\n        byteLength = byteLength >>> 0;\n        if (!noAssert) {\n            Buffer.checkOffset(offset, byteLength, this.length);\n        }\n        let val = this[offset];\n        let mul = 1;\n        let i = 0;\n        while (++i < byteLength && (mul *= 0x100)) {\n            val += this[offset + i] * mul;\n        }\n        return val;\n    }\n    readUIntBE(offset, byteLength, noAssert) {\n        offset = offset >>> 0;\n        byteLength = byteLength >>> 0;\n        if (!noAssert) {\n            Buffer.checkOffset(offset, byteLength, this.length);\n        }\n        let val = this[offset + --byteLength];\n        let mul = 1;\n        while (byteLength > 0 && (mul *= 0x100)) {\n            val += this[offset + --byteLength] * mul;\n        }\n        return val;\n    }\n    readUInt8(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) {\n            Buffer.checkOffset(offset, 1, this.length);\n        }\n        return this[offset];\n    }\n    readUInt16LE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) {\n            Buffer.checkOffset(offset, 2, this.length);\n        }\n        return this[offset] | (this[offset + 1] << 8);\n    }\n    readUInt16BE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) {\n            Buffer.checkOffset(offset, 2, this.length);\n        }\n        return (this[offset] << 8) | this[offset + 1];\n    }\n    readUInt32LE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) {\n            Buffer.checkOffset(offset, 4, this.length);\n        }\n        return ((this[offset] | (this[offset + 1] << 8) | (this[offset + 2] << 16)) +\n            this[offset + 3] * 0x1000000);\n    }\n    readUInt32BE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) {\n            Buffer.checkOffset(offset, 4, this.length);\n        }\n        return (this[offset] * 0x1000000 +\n            ((this[offset + 1] << 16) | (this[offset + 2] << 8) | this[offset + 3]));\n    }\n    readIntLE(offset, byteLength, noAssert) {\n        offset = offset >>> 0;\n        byteLength = byteLength >>> 0;\n        if (!noAssert) {\n            Buffer.checkOffset(offset, byteLength, this.length);\n        }\n        let val = this[offset];\n        let mul = 1;\n        let i = 0;\n        while (++i < byteLength && (mul *= 0x100)) {\n            val += this[offset + i] * mul;\n        }\n        mul *= 0x80;\n        if (val >= mul) {\n            val -= Math.pow(2, 8 * byteLength);\n        }\n        return val;\n    }\n    readIntBE(offset, byteLength, noAssert) {\n        offset = offset >>> 0;\n        byteLength = byteLength >>> 0;\n        if (!noAssert) {\n            Buffer.checkOffset(offset, byteLength, this.length);\n        }\n        let i = byteLength;\n        let mul = 1;\n        let val = this[offset + --i];\n        while (i > 0 && (mul *= 0x100)) {\n            val += this[offset + --i] * mul;\n        }\n        mul *= 0x80;\n        if (val >= mul) {\n            val -= Math.pow(2, 8 * byteLength);\n        }\n        return val;\n    }\n    readInt8(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) {\n            Buffer.checkOffset(offset, 1, this.length);\n        }\n        if (!(this[offset] & 0x80)) {\n            return this[offset];\n        }\n        return (0xff - this[offset] + 1) * -1;\n    }\n    readInt16LE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) {\n            Buffer.checkOffset(offset, 2, this.length);\n        }\n        const val = this[offset] | (this[offset + 1] << 8);\n        return val & 0x8000 ? val | 0xffff0000 : val;\n    }\n    readInt16BE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) {\n            Buffer.checkOffset(offset, 2, this.length);\n        }\n        const val = this[offset + 1] | (this[offset] << 8);\n        return val & 0x8000 ? val | 0xffff0000 : val;\n    }\n    readInt32LE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) {\n            Buffer.checkOffset(offset, 4, this.length);\n        }\n        return (this[offset] |\n            (this[offset + 1] << 8) |\n            (this[offset + 2] << 16) |\n            (this[offset + 3] << 24));\n    }\n    readInt32BE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) {\n            Buffer.checkOffset(offset, 4, this.length);\n        }\n        return ((this[offset] << 24) |\n            (this[offset + 1] << 16) |\n            (this[offset + 2] << 8) |\n            this[offset + 3]);\n    }\n    readFloatLE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) {\n            Buffer.checkOffset(offset, 4, this.length);\n        }\n        const facade = this;\n        return ieee754.read(facade, offset, true, 23, 4);\n    }\n    readFloatBE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) {\n            Buffer.checkOffset(offset, 4, this.length);\n        }\n        const facade = this;\n        return ieee754.read(facade, offset, false, 23, 4);\n    }\n    readDoubleLE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) {\n            Buffer.checkOffset(offset, 8, this.length);\n        }\n        const facade = this;\n        return ieee754.read(facade, offset, true, 52, 8);\n    }\n    readDoubleBE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) {\n            Buffer.checkOffset(offset, 8, this.length);\n        }\n        const facade = this;\n        return ieee754.read(facade, offset, false, 52, 8);\n    }\n    // #region write: string\n    static hexWrite(buf, string, offset, length) {\n        offset = Number(offset) || 0;\n        const remaining = buf.length - offset;\n        if (!length) {\n            length = remaining;\n        }\n        else {\n            length = Number(length);\n            if (length > remaining) {\n                length = remaining;\n            }\n        }\n        const strLen = string.length;\n        if (length > strLen / 2) {\n            length = strLen / 2;\n        }\n        for (var i = 0; i < length; ++i) {\n            const parsed = parseInt(string.substr(i * 2, 2), 16);\n            if (Buffer.numberIsNaN(parsed))\n                return i;\n            buf[offset + i] = parsed;\n        }\n        return i;\n    }\n    static utf8Write(buf, str, offset, length) {\n        return Buffer.blitBuffer(Buffer.utf8ToBytes(str, buf.length - offset), buf, offset, length);\n    }\n    static asciiWrite(buf, str, offset, length) {\n        return Buffer.blitBuffer(Buffer.asciiToBytes(str), buf, offset, length);\n    }\n    static latin1Write(buf, str, offset, length) {\n        return Buffer.asciiWrite(buf, str, offset, length);\n    }\n    static base64Write(buf, str, offset, length) {\n        return Buffer.blitBuffer(Buffer.base64ToBytes(str), buf, offset, length);\n    }\n    static ucs2Write(buf, str, offset, length) {\n        return Buffer.blitBuffer(Buffer.utf16leToBytes(str, buf.length - offset), buf, offset, length);\n    }\n    write(...args) {\n        // Buffer#write(string)\n        if (args[1] === undefined) {\n            args[3] = 'utf8';\n            args[2] = this.length;\n            args[1] = 0;\n            // Buffer#write(string, encoding)\n        }\n        else if (args[2] === undefined && typeof args[1] === 'string') {\n            args[3] = args[1];\n            args[2] = this.length;\n            args[1] = 0;\n            // Buffer#write(string, offset[, length][, encoding])\n        }\n        else if (isFinite(args[1])) {\n            args[1] = args[1] >>> 0;\n            if (isFinite(args[2])) {\n                args[2] = args[2] >>> 0;\n                if (args[3] === undefined)\n                    args[3] = 'utf8';\n            }\n            else {\n                args[3] = args[2];\n                args[2] = undefined;\n            }\n        }\n        else {\n            throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');\n        }\n        const remaining = this.length - args[1];\n        if (args[2] === undefined || args[2] > remaining)\n            args[2] = remaining;\n        if ((args[0].length > 0 && (args[2] < 0 || args[1] < 0)) ||\n            args[1] > this.length) {\n            throw new RangeError('Attempt to write outside Buffer bounds');\n        }\n        if (!args[3]) {\n            args[3] = 'utf8';\n        }\n        let loweredCase = false;\n        for (;;) {\n            switch (args[3]) {\n                case 'hex':\n                    return Buffer.hexWrite(this, args[0], args[1], args[2]);\n                case 'utf8':\n                case 'utf-8':\n                    return Buffer.utf8Write(this, args[0], args[1], args[2]);\n                case 'ascii':\n                    return Buffer.asciiWrite(this, args[0], args[1], args[2]);\n                case 'latin1':\n                case 'binary':\n                    return Buffer.latin1Write(this, args[0], args[1], args[2]);\n                case 'base64':\n                    // Warning: maxLength not taken into account in base64Write\n                    return Buffer.base64Write(this, args[0], args[1], args[2]);\n                case 'ucs2':\n                case 'ucs-2':\n                case 'utf16le':\n                case 'utf-16le':\n                    return Buffer.ucs2Write(this, args[0], args[1], args[2]);\n                default:\n                    if (loweredCase) {\n                        throw new TypeError('Unknown encoding: ' + args[3]);\n                    }\n                    args[3] = ('' + args[3]).toLowerCase();\n                    loweredCase = true;\n            }\n        }\n    }\n    // #region write: numerics\n    static checkInt(buf, value, offset, ext, max, min) {\n        if (!Buffer.isBuffer(buf))\n            throw new TypeError('\"Buffer\" argument must be a Buffer instance');\n        if (value > max || value < min)\n            throw new RangeError('\"value\" argument is out of bounds');\n        if (offset + ext > buf.length)\n            throw new RangeError('Index out of range');\n    }\n    writeUIntLE(value, offset, byteLength, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        byteLength = byteLength >>> 0;\n        if (!noAssert) {\n            const maxBytes = Math.pow(2, 8 * byteLength) - 1;\n            Buffer.checkInt(this, value, offset, byteLength, maxBytes, 0);\n        }\n        let mul = 1;\n        let i = 0;\n        this[offset] = value & 0xff;\n        while (++i < byteLength && (mul *= 0x100)) {\n            this[offset + i] = (value / mul) & 0xff;\n        }\n        return offset + byteLength;\n    }\n    writeUIntBE(value, offset, byteLength, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        byteLength = byteLength >>> 0;\n        if (!noAssert) {\n            const maxBytes = Math.pow(2, 8 * byteLength) - 1;\n            Buffer.checkInt(this, value, offset, byteLength, maxBytes, 0);\n        }\n        let i = byteLength - 1;\n        let mul = 1;\n        this[offset + i] = value & 0xff;\n        while (--i >= 0 && (mul *= 0x100)) {\n            this[offset + i] = (value / mul) & 0xff;\n        }\n        return offset + byteLength;\n    }\n    writeUInt8(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) {\n            Buffer.checkInt(this, value, offset, 1, 0xff, 0);\n        }\n        this[offset] = value & 0xff;\n        return offset + 1;\n    }\n    writeUInt16LE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) {\n            Buffer.checkInt(this, value, offset, 2, 0xffff, 0);\n        }\n        this[offset] = value & 0xff;\n        this[offset + 1] = value >>> 8;\n        return offset + 2;\n    }\n    writeUInt16BE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) {\n            Buffer.checkInt(this, value, offset, 2, 0xffff, 0);\n        }\n        this[offset] = value >>> 8;\n        this[offset + 1] = value & 0xff;\n        return offset + 2;\n    }\n    writeUInt32LE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) {\n            Buffer.checkInt(this, value, offset, 4, 0xffffffff, 0);\n        }\n        this[offset + 3] = value >>> 24;\n        this[offset + 2] = value >>> 16;\n        this[offset + 1] = value >>> 8;\n        this[offset] = value & 0xff;\n        return offset + 4;\n    }\n    writeUInt32BE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) {\n            Buffer.checkInt(this, value, offset, 4, 0xffffffff, 0);\n        }\n        this[offset] = value >>> 24;\n        this[offset + 1] = value >>> 16;\n        this[offset + 2] = value >>> 8;\n        this[offset + 3] = value & 0xff;\n        return offset + 4;\n    }\n    writeIntLE(value, offset, byteLength, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) {\n            const limit = Math.pow(2, 8 * byteLength - 1);\n            Buffer.checkInt(this, value, offset, byteLength, limit - 1, -limit);\n        }\n        let i = 0;\n        let mul = 1;\n        let sub = 0;\n        this[offset] = value & 0xff;\n        while (++i < byteLength && (mul *= 0x100)) {\n            if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n                sub = 1;\n            }\n            this[offset + i] = (((value / mul) >> 0) - sub) & 0xff;\n        }\n        return offset + byteLength;\n    }\n    writeIntBE(value, offset, byteLength, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) {\n            const limit = Math.pow(2, 8 * byteLength - 1);\n            Buffer.checkInt(this, value, offset, byteLength, limit - 1, -limit);\n        }\n        let i = byteLength - 1;\n        let mul = 1;\n        let sub = 0;\n        this[offset + i] = value & 0xff;\n        while (--i >= 0 && (mul *= 0x100)) {\n            if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n                sub = 1;\n            }\n            this[offset + i] = (((value / mul) >> 0) - sub) & 0xff;\n        }\n        return offset + byteLength;\n    }\n    writeInt8(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) {\n            Buffer.checkInt(this, value, offset, 1, 0x7f, -0x80);\n        }\n        if (value < 0)\n            value = 0xff + value + 1;\n        this[offset] = value & 0xff;\n        return offset + 1;\n    }\n    writeInt16LE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) {\n            Buffer.checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n        }\n        this[offset] = value & 0xff;\n        this[offset + 1] = value >>> 8;\n        return offset + 2;\n    }\n    writeInt16BE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) {\n            Buffer.checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n        }\n        this[offset] = value >>> 8;\n        this[offset + 1] = value & 0xff;\n        return offset + 2;\n    }\n    writeInt32LE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) {\n            Buffer.checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n        }\n        this[offset] = value & 0xff;\n        this[offset + 1] = value >>> 8;\n        this[offset + 2] = value >>> 16;\n        this[offset + 3] = value >>> 24;\n        return offset + 4;\n    }\n    writeInt32BE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) {\n            Buffer.checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n        }\n        if (value < 0)\n            value = 0xffffffff + value + 1;\n        this[offset] = value >>> 24;\n        this[offset + 1] = value >>> 16;\n        this[offset + 2] = value >>> 8;\n        this[offset + 3] = value & 0xff;\n        return offset + 4;\n    }\n    static checkIEEE754(buf, value, offset, ext, max, min) {\n        if (offset + ext > buf.length)\n            throw new RangeError('Index out of range');\n        if (offset < 0)\n            throw new RangeError('Index out of range');\n    }\n    static writeFloat(buf, value, offset, littleEndian, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) {\n            Buffer.checkIEEE754(buf, value, offset, 4, 3.4028234663852886e38, -3.4028234663852886e38);\n        }\n        ieee754.write(buf, value, offset, littleEndian, 23, 4);\n        return offset + 4;\n    }\n    writeFloatLE(value, offset, noAssert) {\n        return Buffer.writeFloat(this, value, offset, true, noAssert);\n    }\n    writeFloatBE(value, offset, noAssert) {\n        return Buffer.writeFloat(this, value, offset, false, noAssert);\n    }\n    static writeDouble(buf, value, offset, littleEndian, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) {\n            Buffer.checkIEEE754(buf, value, offset, 8, 1.7976931348623157e308, -1.7976931348623157e308);\n        }\n        ieee754.write(buf, value, offset, littleEndian, 52, 8);\n        return offset + 8;\n    }\n    writeDoubleLE(value, offset, noAssert) {\n        return Buffer.writeDouble(this, value, offset, true, noAssert);\n    }\n    writeDoubleBE(value, offset, noAssert) {\n        return Buffer.writeDouble(this, value, offset, false, noAssert);\n    }\n    // #region static: alloc\n    static allocUnsafe(size) {\n        Buffer.assertSize(size);\n        return Buffer.createBuffer(size < 0 ? 0 : Buffer.checked(size) | 0);\n    }\n    static alloc(size, fill, encoding) {\n        Buffer.assertSize(size);\n        if (size <= 0) {\n            return Buffer.createBuffer(size);\n        }\n        if (fill !== undefined) {\n            // Only pay attention to encoding if it's a string. This\n            // prevents accidentally sending in a number that would\n            // be interpretted as a start offset.\n            return typeof encoding === 'string'\n                ? Buffer.createBuffer(size).fill(fill, encoding)\n                : Buffer.createBuffer(size).fill(fill);\n        }\n        return Buffer.createBuffer(size);\n    }\n    // #region static: from\n    static fromString(str, encoding) {\n        if (typeof encoding !== 'string' || encoding === '') {\n            encoding = 'utf8';\n        }\n        if (!Buffer.isEncoding(encoding)) {\n            throw new TypeError('Unknown encoding: ' + encoding);\n        }\n        const length = Buffer.byteLength(str, encoding) | 0;\n        let buf = Buffer.createBuffer(length);\n        const actual = buf.write(str, encoding);\n        if (actual !== length) {\n            // Writing a hex string, for example, that contains invalid characters will\n            // cause everything after the first invalid character to be ignored. (e.g.\n            // 'abxxcd' will be treated as 'ab')\n            buf = buf.slice(0, actual);\n        }\n        return buf;\n    }\n    static fromArrayLike(array) {\n        const length = array.length < 0 ? 0 : Buffer.checked(array.length) | 0;\n        const buf = Buffer.createBuffer(length);\n        for (let i = 0; i < length; i += 1) {\n            buf[i] = array[i] & 255;\n        }\n        return buf;\n    }\n    static fromArrayBuffer(array, byteOffset, length) {\n        if (byteOffset < 0 || array.byteLength < byteOffset) {\n            throw new RangeError('\"offset\" is outside of buffer bounds');\n        }\n        if (array.byteLength < byteOffset + (length || 0)) {\n            throw new RangeError('\"length\" is outside of buffer bounds');\n        }\n        let buf;\n        if (byteOffset === undefined && length === undefined) {\n            buf = new Uint8Array(array);\n        }\n        else if (length === undefined) {\n            buf = new Uint8Array(array, byteOffset);\n        }\n        else {\n            buf = new Uint8Array(array, byteOffset, length);\n        }\n        // Return an augmented `Uint8Array` instance\n        const facade = buf;\n        facade.__proto__ = Buffer.prototype;\n        return facade;\n    }\n    static fromObject(obj) {\n        if (Buffer.isBuffer(obj)) {\n            const len = Buffer.checked(obj.length) | 0;\n            const buf = Buffer.createBuffer(len);\n            if (buf.length === 0) {\n                return buf;\n            }\n            obj.copy(buf, 0, 0, len);\n            return buf;\n        }\n        if (obj.length !== undefined) {\n            if (typeof obj.length !== 'number' || Buffer.numberIsNaN(obj.length)) {\n                return Buffer.createBuffer(0);\n            }\n            return Buffer.fromArrayLike(obj);\n        }\n        if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n            return Buffer.fromArrayLike(obj.data);\n        }\n        throw TypeError('Unable create buffer from given object.');\n    }\n    static from(...args) {\n        if (typeof args[0] === 'string') {\n            return Buffer.fromString(args[0], args[1]);\n        }\n        if (ArrayBuffer.isView(args[0])) {\n            return Buffer.fromArrayLike(args[0]);\n        }\n        if (args[0] == null) {\n            throw TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n                'or Array-like Object. Received type ' +\n                typeof args[0]);\n        }\n        if (Buffer.isInstance(args[0], ArrayBuffer) ||\n            (args[0] && Buffer.isInstance(args[0].buffer, ArrayBuffer))) {\n            return Buffer.fromArrayBuffer(args[0], args[1], args[2]);\n        }\n        if (typeof args[0] === 'number') {\n            throw new TypeError('The \"value\" argument must not be of type number. Received type number');\n        }\n        const valueOf = args[0].valueOf && args[0].valueOf();\n        if (valueOf != null && valueOf !== args[0]) {\n            return Buffer.from(args[0], args[1], args[2]);\n        }\n        const b = Buffer.fromObject(args[0]);\n        if (b)\n            return b;\n        if (typeof Symbol !== 'undefined' &&\n            Symbol.toPrimitive != null &&\n            typeof args[0][Symbol.toPrimitive] === 'function') {\n            return Buffer.from(args[0][Symbol.toPrimitive]('string'), args[1], args[2]);\n        }\n        throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n            'or Array-like Object. Received type ' +\n            typeof args[0]);\n    }\n    static isBuffer(b) {\n        return b instanceof Buffer;\n    }\n    static byteLength(...args) {\n        if (Buffer.isBuffer(args[0])) {\n            return args[0].length;\n        }\n        if (ArrayBuffer.isView(args[0]) ||\n            Buffer.isInstance(args[0], ArrayBuffer)) {\n            return args[0].byteLength;\n        }\n        if (typeof args[0] !== 'string') {\n            throw new TypeError('The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n                'Received type ' +\n                typeof args[0]);\n        }\n        const len = args[0].length;\n        const mustMatch = args.length > 2 && args[2] === true;\n        if (!mustMatch && len === 0)\n            return 0;\n        // Use a for loop to avoid recursion\n        let loweredCase = false;\n        for (;;) {\n            switch (args[1]) {\n                case 'ascii':\n                case 'latin1':\n                case 'binary':\n                    return len;\n                case 'utf8':\n                case 'utf-8':\n                    return Buffer.utf8ToBytes(args[0]).length;\n                case 'ucs2':\n                case 'ucs-2':\n                case 'utf16le':\n                case 'utf-16le':\n                    return len * 2;\n                case 'hex':\n                    return len >>> 1;\n                case 'base64':\n                    return Buffer.base64ToBytes(args[0]).length;\n                default:\n                    if (loweredCase) {\n                        return mustMatch ? -1 : Buffer.utf8ToBytes(args[0]).length; // assume utf8\n                    }\n                    args[1] = ('' + args[1]).toLowerCase();\n                    loweredCase = true;\n            }\n        }\n    }\n    // #region static: compare\n    static compare(a, b) {\n        if (Buffer.isInstance(a, Uint8Array)) {\n            a = Buffer.from(a, a.byteOffset, a.byteLength);\n        }\n        if (Buffer.isInstance(b, Uint8Array)) {\n            b = Buffer.from(b, b.byteOffset, b.byteLength);\n        }\n        if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n            throw new TypeError('The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array');\n        }\n        if (a === b)\n            return 0;\n        let x = a.length;\n        let y = b.length;\n        for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n            if (a[i] !== b[i]) {\n                x = a[i];\n                y = b[i];\n                break;\n            }\n        }\n        if (x < y)\n            return -1;\n        if (y < x)\n            return 1;\n        return 0;\n    }\n    // #region static: isEncoding\n    static isEncoding(encoding) {\n        switch (String(encoding).toLowerCase()) {\n            case 'hex':\n            case 'utf8':\n            case 'utf-8':\n            case 'ascii':\n            case 'latin1':\n            case 'binary':\n            case 'base64':\n            case 'ucs2':\n            case 'ucs-2':\n            case 'utf16le':\n            case 'utf-16le':\n                return true;\n            default:\n                return false;\n        }\n    }\n    // #region static: concat\n    static concat(list, length) {\n        if (!Array.isArray(list)) {\n            throw new TypeError('\"list\" argument must be an Array of Buffers');\n        }\n        if (list.length === 0) {\n            return Buffer.alloc(0);\n        }\n        let i;\n        if (length === undefined) {\n            length = 0;\n            for (i = 0; i < list.length; ++i) {\n                length += list[i].length;\n            }\n        }\n        const buffer = Buffer.allocUnsafe(length);\n        let pos = 0;\n        for (i = 0; i < list.length; ++i) {\n            let buf = list[i];\n            if (Buffer.isInstance(buf, Uint8Array)) {\n                buf = Buffer.from(buf);\n            }\n            if (!Buffer.isBuffer(buf)) {\n                throw new TypeError('\"list\" argument must be an Array of Buffers');\n            }\n            buf.copy(buffer, pos);\n            pos += buf.length;\n        }\n        return buffer;\n    }\n    // #region private-static: helpers\n    static assertSize(size) {\n        if (typeof size !== 'number') {\n            throw new TypeError(`'size' argument must be of type number`);\n        }\n        else if (size < 0) {\n            throw new RangeError(`The value '${size}' is invalid for option \"size\"`);\n        }\n    }\n    static createBuffer(length) {\n        if (length > K_MAX_LENGTH) {\n            throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"');\n        }\n        // Return an augmented `Uint8Array` instance\n        return new Buffer(length);\n    }\n    static checked(length) {\n        // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n        // length is NaN (which is otherwise coerced to zero.)\n        if (length >= K_MAX_LENGTH) {\n            throw new RangeError(`Attempt to allocate Buffer larger than maximum ` +\n                `size: 0x${K_MAX_LENGTH.toString(16)} bytes`);\n        }\n        return length | 0;\n    }\n    static base64clean(str) {\n        // Node takes equal signs as end of the Base64 encoding\n        str = str.split('=')[0];\n        // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n        str = str.trim().replace(INVALID_BASE64_RE, '');\n        // Node converts strings with length < 2 to ''\n        if (str.length < 2)\n            return '';\n        // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n        while (str.length % 4 !== 0) {\n            str = str + '=';\n        }\n        return str;\n    }\n    static toHex(n) {\n        if (n < 16)\n            return '0' + n.toString(16);\n        return n.toString(16);\n    }\n    static utf8ToBytes(str, units) {\n        units = units || Infinity;\n        let codePoint;\n        const length = str.length;\n        let leadSurrogate = null;\n        const bytes = [];\n        for (let i = 0; i < length; ++i) {\n            codePoint = str.charCodeAt(i);\n            // is surrogate component\n            if (codePoint > 0xd7ff && codePoint < 0xe000) {\n                // last char was a lead\n                if (!leadSurrogate) {\n                    // no lead yet\n                    if (codePoint > 0xdbff) {\n                        // unexpected trail\n                        if ((units -= 3) > -1)\n                            bytes.push(0xef, 0xbf, 0xbd);\n                        continue;\n                    }\n                    else if (i + 1 === length) {\n                        // unpaired lead\n                        if ((units -= 3) > -1)\n                            bytes.push(0xef, 0xbf, 0xbd);\n                        continue;\n                    }\n                    // valid lead\n                    leadSurrogate = codePoint;\n                    continue;\n                }\n                // 2 leads in a row\n                if (codePoint < 0xdc00) {\n                    if ((units -= 3) > -1)\n                        bytes.push(0xef, 0xbf, 0xbd);\n                    leadSurrogate = codePoint;\n                    continue;\n                }\n                // valid surrogate pair\n                codePoint =\n                    (((leadSurrogate - 0xd800) << 10) | (codePoint - 0xdc00)) + 0x10000;\n            }\n            else if (leadSurrogate) {\n                // valid bmp char, but last char was a lead\n                if ((units -= 3) > -1)\n                    bytes.push(0xef, 0xbf, 0xbd);\n            }\n            leadSurrogate = null;\n            // encode utf8\n            if (codePoint < 0x80) {\n                if ((units -= 1) < 0)\n                    break;\n                bytes.push(codePoint);\n            }\n            else if (codePoint < 0x800) {\n                if ((units -= 2) < 0)\n                    break;\n                bytes.push((codePoint >> 0x6) | 0xc0, (codePoint & 0x3f) | 0x80);\n            }\n            else if (codePoint < 0x10000) {\n                if ((units -= 3) < 0)\n                    break;\n                bytes.push((codePoint >> 0xc) | 0xe0, ((codePoint >> 0x6) & 0x3f) | 0x80, (codePoint & 0x3f) | 0x80);\n            }\n            else if (codePoint < 0x110000) {\n                if ((units -= 4) < 0)\n                    break;\n                bytes.push((codePoint >> 0x12) | 0xf0, ((codePoint >> 0xc) & 0x3f) | 0x80, ((codePoint >> 0x6) & 0x3f) | 0x80, (codePoint & 0x3f) | 0x80);\n            }\n            else {\n                throw new Error('Invalid code point');\n            }\n        }\n        return bytes;\n    }\n    static asciiToBytes(str) {\n        const byteArray = [];\n        for (let i = 0; i < str.length; ++i) {\n            // Node's code seems to be doing this and not & 0x7F..\n            byteArray.push(str.charCodeAt(i) & 0xff);\n        }\n        return byteArray;\n    }\n    static utf16leToBytes(str, units) {\n        let c, hi, lo;\n        const byteArray = [];\n        for (let i = 0; i < str.length; ++i) {\n            if ((units -= 2) < 0) {\n                break;\n            }\n            c = str.charCodeAt(i);\n            hi = c >> 8;\n            lo = c % 256;\n            byteArray.push(lo);\n            byteArray.push(hi);\n        }\n        return byteArray;\n    }\n    static base64ToBytes(str) {\n        return base64.toByteArray(Buffer.base64clean(str));\n    }\n    static blitBuffer(src, dst, offset, length) {\n        for (var i = 0; i < length; ++i) {\n            if (i + offset >= dst.length || i >= src.length)\n                break;\n            dst[i + offset] = src[i];\n        }\n        return i;\n    }\n    // ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n    // the `instanceof` check but they should be treated as of that type.\n    // See: https://github.com/feross/Buffer/issues/166\n    static isInstance(obj, type) {\n        return (obj instanceof type ||\n            (obj != null &&\n                obj.constructor != null &&\n                obj.constructor.name != null &&\n                obj.constructor.name === type.name));\n    }\n    static numberIsNaN(obj) {\n        // For IE11 support\n        return obj !== obj; // eslint-disable-line no-self-compare\n    }\n}\nexports.Buffer = Buffer;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/buffer/buffer.js?");

/***/ }),

/***/ "../smoke-node/public/bin/buffer/ieee754.js":
/*!**************************************************!*\
  !*** ../smoke-node/public/bin/buffer/ieee754.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** -------------------------------------------------------------------------------\n\n  Copyright (c) 2008, Fair Oaks Labs, Inc.\n  All rights reserved.\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright notice,\n    this list of conditions and the following disclaimer.\n\n  * Redistributions in binary form must reproduce the above copyright notice,\n    this list of conditions and the following disclaimer in the documentation\n    and/or other materials provided with the distribution.\n\n  * Neither the name of Fair Oaks Labs, Inc. nor the names of its contributors\n    may be used to endorse or promote products derived from this software\n    without specific prior written permission.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  POSSIBILITY OF SUCH DAMAGE.\n\n -----------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction read(buffer, offset, isLE, mLen, nBytes) {\n    let e, m;\n    const eLen = nBytes * 8 - mLen - 1;\n    const eMax = (1 << eLen) - 1;\n    const eBias = eMax >> 1;\n    let nBits = -7;\n    let i = isLE ? nBytes - 1 : 0;\n    const d = isLE ? -1 : 1;\n    let s = buffer[offset + i];\n    i += d;\n    e = s & ((1 << -nBits) - 1);\n    s >>= -nBits;\n    nBits += eLen;\n    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) { }\n    m = e & ((1 << -nBits) - 1);\n    e >>= -nBits;\n    nBits += mLen;\n    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) { }\n    if (e === 0) {\n        e = 1 - eBias;\n    }\n    else if (e === eMax) {\n        return m ? NaN : (s ? -1 : 1) * Infinity;\n    }\n    else {\n        m = m + Math.pow(2, mLen);\n        e = e - eBias;\n    }\n    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\n}\nexports.read = read;\nfunction write(buffer, value, offset, isLE, mLen, nBytes) {\n    let e, m, c;\n    let eLen = nBytes * 8 - mLen - 1;\n    const eMax = (1 << eLen) - 1;\n    const eBias = eMax >> 1;\n    const rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;\n    let i = isLE ? 0 : nBytes - 1;\n    const d = isLE ? 1 : -1;\n    const s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;\n    value = Math.abs(value);\n    if (isNaN(value) || value === Infinity) {\n        m = isNaN(value) ? 1 : 0;\n        e = eMax;\n    }\n    else {\n        e = Math.floor(Math.log(value) / Math.LN2);\n        if (value * (c = Math.pow(2, -e)) < 1) {\n            e--;\n            c *= 2;\n        }\n        if (e + eBias >= 1) {\n            value += rt / c;\n        }\n        else {\n            value += rt * Math.pow(2, 1 - eBias);\n        }\n        if (value * c >= 2) {\n            e++;\n            c /= 2;\n        }\n        if (e + eBias >= eMax) {\n            m = 0;\n            e = eMax;\n        }\n        else if (e + eBias >= 1) {\n            m = (value * c - 1) * Math.pow(2, mLen);\n            e = e + eBias;\n        }\n        else {\n            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n            e = 0;\n        }\n    }\n    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) { }\n    e = (e << mLen) | m;\n    eLen += mLen;\n    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) { }\n    buffer[offset + i - d] |= s * 128;\n}\nexports.write = write;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/buffer/ieee754.js?");

/***/ }),

/***/ "../smoke-node/public/bin/buffer/index.js":
/*!************************************************!*\
  !*** ../smoke-node/public/bin/buffer/index.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar buffer_1 = __webpack_require__(/*! ./buffer */ \"../smoke-node/public/bin/buffer/buffer.js\");\nexports.Buffer = buffer_1.Buffer;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/buffer/index.js?");

/***/ }),

/***/ "../smoke-node/public/bin/database/database.js":
/*!*****************************************************!*\
  !*** ../smoke-node/public/bin/database/database.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst async_1 = __webpack_require__(/*! ../async */ \"../smoke-node/public/bin/async/index.js\");\nconst queryable_1 = __webpack_require__(/*! ../queryable */ \"../smoke-node/public/bin/queryable/index.js\");\nconst driver_1 = __webpack_require__(/*! ./driver */ \"../smoke-node/public/bin/database/driver.js\");\nconst streams_1 = __webpack_require__(/*! ../streams */ \"../smoke-node/public/bin/streams/index.js\");\nconst key_1 = __webpack_require__(/*! ./key */ \"../smoke-node/public/bin/database/key.js\");\nclass KeyRequiredError extends Error {\n    constructor(message) {\n        super(message);\n    }\n}\nexports.KeyRequiredError = KeyRequiredError;\n/**\n * An IndexedDB database abstraction that supports transactional write and\n * as well as an expression based query interface for reading. This type is\n * designed as local database for nodes, but also to service as a networked\n * database served over the network via smokes REST stream protocol.\n */\nclass Database {\n    constructor(name) {\n        this.barrier = new async_1.Barrier();\n        this.transact = {\n            inserts: new Map(),\n            updates: new Map(),\n            deletes: new Map()\n        };\n        this.connect(name);\n    }\n    /** Internally connects to the IDB database. */\n    async connect(name) {\n        this.driver = await driver_1.IDBDriver.connect(name);\n        this.barrier.resume();\n    }\n    /** Gets the name of this database. */\n    name() {\n        return this.barrier.run(() => this.driver.name());\n    }\n    /** Gets the version of this database. */\n    version() {\n        return this.barrier.run(() => this.driver.version());\n    }\n    /** Gets the store names for this database. */\n    stores() {\n        return this.barrier.run(() => this.driver.stores());\n    }\n    /** Returns the number of records in the given store. */\n    count(storeKey) {\n        return this.barrier.run(() => {\n            return this.driver.stores().includes(storeKey)\n                ? this.driver.count(storeKey)\n                : 0;\n        });\n    }\n    /** Returns true if the given recordKey exists in the given store. */\n    exists(storeKey, recordKey) {\n        return this.barrier.run(async () => {\n            if (this.driver.stores().includes(storeKey)) {\n                const record = await this.driver.get(storeKey, recordKey);\n                return record !== undefined;\n            }\n            else {\n                return false;\n            }\n        });\n    }\n    /** Returns a record from a store with the given RecordKey. */\n    get(storeKey, recordKey) {\n        return this.barrier.run(() => {\n            return this.driver.stores().includes(storeKey)\n                ? this.driver.get(storeKey, recordKey)\n                : undefined;\n        });\n    }\n    /** Inserts a record into the given store. */\n    insert(storeKey, record) {\n        if (!this.transact.inserts.has(storeKey)) {\n            this.transact.inserts.set(storeKey, []);\n        }\n        this.transact.inserts.get(storeKey).push(record);\n    }\n    /** Updates a record with the given store. */\n    update(storeKey, record) {\n        if (!this.transact.updates.has(storeKey)) {\n            this.transact.updates.set(storeKey, []);\n        }\n        this.transact.updates.get(storeKey).push(record);\n    }\n    /** Deletes a record in the store. */\n    delete(...args) {\n        const storeKey = args[0];\n        const record = (typeof args[1] === 'string') ? ({ key: args[1] }) : args[1];\n        if (record.key === undefined) {\n            throw new KeyRequiredError(`Cannot delete record without \"key\" property.`);\n        }\n        if (!this.transact.deletes.has(storeKey)) {\n            this.transact.deletes.set(storeKey, []);\n        }\n        this.transact.deletes.get(storeKey).push(record);\n    }\n    /** Deletes a store from this database. */\n    drop(storeKey) {\n        return this.barrier.run(() => this.driver.remove([storeKey]));\n    }\n    /** Commits any inserts, updates or deletes made to this database. */\n    async commit() {\n        return this.barrier.run(async () => {\n            const creates = [\n                ...this.transact.inserts.keys(),\n                ...this.transact.updates.keys(),\n                ...this.transact.deletes.keys()\n            ];\n            await this.driver.add(creates);\n            await this.driver.transact(this.transact);\n            this.transact.inserts.clear();\n            this.transact.updates.clear();\n            this.transact.deletes.clear();\n        });\n    }\n    /** Creates a query for the given storeKey. */\n    query(storeKey) {\n        return new queryable_1.Queryable(this.readable(storeKey));\n    }\n    /** Generates a new key. */\n    key() {\n        return key_1.Key.create();\n    }\n    /** Returns a readable to this store key. */\n    readable(storeKey) {\n        let reader;\n        return new streams_1.Readable({\n            start: async (controller) => this.barrier.run(async () => {\n                if (!this.driver.stores().includes(storeKey)) {\n                    controller.close();\n                }\n                reader = this.driver.read(storeKey);\n            }),\n            pull: async (controller) => {\n                const record = await reader.read();\n                if (record !== null) {\n                    controller.enqueue(record);\n                }\n                else {\n                    controller.close();\n                }\n            }\n        });\n    }\n    /** Disposes of this object. */\n    dispose() {\n        return this.barrier.run(() => this.driver.close());\n    }\n    /** Drops the database with the given key. */\n    static async drop(databaseKey) {\n        await driver_1.IDBDriver.drop(databaseKey);\n    }\n}\nexports.Database = Database;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/database/database.js?");

/***/ }),

/***/ "../smoke-node/public/bin/database/driver.js":
/*!***************************************************!*\
  !*** ../smoke-node/public/bin/database/driver.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst DBFactory = () => {\n    const host = window;\n    return host.indexedDB\n        || host.mozIndexedDB\n        || host.webkitIndexedDB\n        || host.msIndexedDB\n        || host.shimIndexedDB;\n};\nclass Semaphore {\n    constructor() {\n        this.awaiters = [];\n        this.running = false;\n    }\n    /** Schedules this operation to run. */\n    run(func) {\n        return new Promise((resolve, reject) => {\n            this.awaiters.push({ func, resolve, reject });\n            this.dispatch();\n        });\n    }\n    /** (async-recursive) Dispatchs operations to the configured concurrency limit. */\n    async dispatch() {\n        if (this.running || this.awaiters.length === 0) {\n            return;\n        }\n        const awaiter = this.awaiters.shift();\n        this.running = true;\n        try {\n            awaiter.resolve(await awaiter.func());\n            setTimeout(() => {\n                this.running = false;\n                this.dispatch();\n            }, 0);\n        }\n        catch (error) {\n            awaiter.reject(error);\n            setTimeout(() => {\n                this.running = false;\n                this.dispatch();\n            }, 0);\n        }\n    }\n}\n// -------------------------------------------------------------------------\n//\n// ReaderAsyncIterator\n//\n// A specialized async iterator implementation specific to the Reader.\n// This iterator will iterator so long as the 'next' value given from\n// the Reader is not `null`.\n//\n// -------------------------------------------------------------------------\nclass ReaderAsyncIterator {\n    constructor(reader) {\n        this.reader = reader;\n    }\n    async next() {\n        const next = await this.reader.read();\n        if (next === null) {\n            const done = true;\n            const value = null;\n            return { done, value };\n        }\n        const done = false;\n        const value = next;\n        return { done, value };\n    }\n}\nexports.ReaderAsyncIterator = ReaderAsyncIterator;\nclass Reader {\n    constructor() {\n        this.deferreds = [];\n        this.values = [];\n        this.ended = false;\n    }\n    [Symbol.asyncIterator]() {\n        return new ReaderAsyncIterator(this);\n    }\n    resolve() {\n        if (this.values.length > 0 && this.deferreds.length > 0) {\n            const deferred = this.deferreds.shift();\n            const value = this.values.shift();\n            if (value !== null && value.record === null) {\n                this.ended = true;\n            }\n            return (value.error)\n                ? deferred.reject(value.error)\n                : deferred.resolve(value.record);\n        }\n    }\n    write(record) {\n        this.values.push({ record });\n        this.resolve();\n    }\n    error(error) {\n        this.values.push({ error });\n        this.resolve();\n    }\n    read() {\n        if (this.ended) {\n            return Promise.resolve(null);\n        }\n        const promise = new Promise((resolve, reject) => {\n            this.deferreds.push({ resolve, reject });\n        });\n        this.resolve();\n        return promise;\n    }\n}\nexports.Reader = Reader;\n/**\n* An IndexedDB database abstraction that provides a promise based read and\n* write interface over a IndexedDB database. Provides functionality to open and\n* close IDB stores, lookup store names, get and scan over object stores and run\n* transactional updates.\n*/\nclass IDBDriver {\n    constructor(database) {\n        this.database = database;\n        this.semaphore = new Semaphore();\n    }\n    // #region Version Increments\n    /** (mutable-database) Adds these stores to this database. Will increment the database on version change. */\n    add(storeKeys) {\n        return this.semaphore.run(async () => {\n            for (const storeKey of storeKeys) {\n                const name = this.database.name;\n                const version = this.database.version;\n                if (!this.stores().includes(storeKey)) {\n                    this.database.close();\n                    this.database = await IDBDriver.open(name, {\n                        version: version + 1,\n                        additions: [storeKey],\n                        removals: []\n                    });\n                }\n            }\n        });\n    }\n    /** (mutable-database) Removes these stores to this database. Will increment the database on version change. */\n    remove(storeKeys) {\n        return this.semaphore.run(async () => {\n            for (const storeKey of storeKeys) {\n                const name = this.database.name;\n                const version = this.database.version;\n                if (this.stores().includes(storeKey)) {\n                    this.database.close();\n                    this.database = await IDBDriver.open(name, {\n                        version: version + 1,\n                        additions: [],\n                        removals: [storeKey]\n                    });\n                }\n            }\n        });\n    }\n    // #region Get, Count and Read\n    /** Returns the name of this database. */\n    name() {\n        return this.database.name;\n    }\n    /** Returns the version of this database. */\n    version() {\n        return this.database.version;\n    }\n    /** Returns store names for this database. */\n    stores() {\n        const stores = [];\n        for (let i = 0; i < this.database.objectStoreNames.length; i++) {\n            stores.push(this.database.objectStoreNames[i]);\n        }\n        return stores;\n    }\n    /** Gets a store record with with the given recordKey. */\n    get(storeKey, recordKey) {\n        return this.semaphore.run(() => new Promise((resolve, reject) => {\n            const transaction = this.database.transaction([storeKey], 'readonly');\n            const store = transaction.objectStore(storeKey);\n            const request = store.get(recordKey);\n            request.addEventListener(\"success\", () => resolve(request.result));\n            request.addEventListener(\"error\", () => reject(request.error));\n        }));\n    }\n    /** Counts records in the given store. */\n    count(storeKey) {\n        return this.semaphore.run(() => new Promise((resolve, reject) => {\n            const transaction = this.database.transaction([storeKey], 'readonly');\n            const store = transaction.objectStore(storeKey);\n            const request = store.count();\n            request.addEventListener(\"success\", () => resolve(request.result));\n            request.addEventListener(\"error\", () => reject(request.error));\n        }));\n    }\n    /** Reads store records. The will read until 'null' as last record. */\n    read(storeKey) {\n        const reader = new Reader();\n        const transaction = this.database.transaction([storeKey], 'readonly');\n        transaction.addEventListener(\"error\", () => reader.error(transaction.error));\n        transaction.addEventListener(\"complete\", () => reader.write(null));\n        const store = transaction.objectStore(storeKey);\n        const request = store.openCursor();\n        request.addEventListener(\"error\", () => reader.error(request.error));\n        request.addEventListener(\"success\", (event) => {\n            const cursor = event.target.result;\n            if (cursor) {\n                reader.write(cursor.value);\n                cursor.continue();\n            }\n        });\n        return reader;\n    }\n    // #region Transactions\n    /** Applies an store update against the given transaction. */\n    transactUpdateRecordCursors(transaction, storeKey, records) {\n        return new Promise((resolve, reject) => {\n            const store = transaction.objectStore(storeKey);\n            const request = store.openCursor();\n            request.addEventListener(\"error\", () => reject(transaction.error));\n            request.addEventListener(\"success\", (event) => {\n                const cursor = event.target.result;\n                if (cursor === null) {\n                    resolve();\n                    return;\n                }\n                for (const record of records) {\n                    if (record.key === cursor.key) {\n                        cursor.update(record);\n                        cursor.continue();\n                        return;\n                    }\n                }\n                cursor.continue();\n            });\n        });\n    }\n    /** Updates records with the given transaction. */\n    transactUpdateRecords(transaction, updates) {\n        return Promise.all([...updates.keys()].map(storeKey => {\n            const records = updates.get(storeKey);\n            return this.transactUpdateRecordCursors(transaction, storeKey, records);\n        }));\n    }\n    /** Inserts the given records with the given transaction. */\n    transactInsertRecords(transaction, inserts) {\n        for (const storeKey of inserts.keys()) {\n            const store = transaction.objectStore(storeKey);\n            const records = inserts.get(storeKey);\n            records.forEach(record => store.add(record));\n        }\n    }\n    /** Deletes the given records with the given transaction. */\n    transactDeleteRecords(transaction, deletes) {\n        for (const storeKey of deletes.keys()) {\n            const store = transaction.objectStore(storeKey);\n            const records = deletes.get(storeKey);\n            records.forEach(record => store.delete(record.key));\n        }\n    }\n    /** Executes inserts | updates and deletes as a single operation. */\n    transact(transact) {\n        return this.semaphore.run(() => new Promise(async (resolve, reject) => {\n            // select storeKeys distinct\n            const storeKeys = [\n                ...transact.inserts.keys(),\n                ...transact.deletes.keys(),\n                ...transact.updates.keys()\n            ].filter((value, index, result) => result.indexOf(value) === index);\n            if (storeKeys.length === 0) {\n                resolve();\n                return;\n            }\n            // execute transaction across storeKeys\n            const transaction = this.database.transaction(storeKeys, 'readwrite');\n            transaction.addEventListener(\"error\", (error) => reject(error.target.error));\n            transaction.addEventListener(\"complete\", () => resolve());\n            if ([...transact.inserts.keys()].length > 0) {\n                this.transactInsertRecords(transaction, transact.inserts);\n            }\n            if ([...transact.updates.keys()].length > 0) {\n                await this.transactUpdateRecords(transaction, transact.updates);\n            }\n            if ([...transact.deletes.keys()].length > 0) {\n                this.transactDeleteRecords(transaction, transact.deletes);\n            }\n        }));\n    }\n    /** Closes this database. */\n    close() {\n        this.database.close();\n    }\n    // #region Statics\n    /** Opens this database */\n    static open(databaseKey, options = { additions: [], removals: [] }) {\n        return new Promise((resolve, reject) => {\n            const request = DBFactory().open(databaseKey, options.version);\n            request.addEventListener('error', () => reject(request.error));\n            request.addEventListener('success', () => resolve(request.result));\n            request.addEventListener(\"upgradeneeded\", () => {\n                const updated = request.result;\n                options.additions.forEach(storeKey => updated.createObjectStore(storeKey, { keyPath: 'key' }));\n                options.removals.forEach(storeKey => updated.deleteObjectStore(storeKey));\n            });\n        });\n    }\n    /** Connects to an IDB instance. */\n    static async connect(databaseKey) {\n        const database = await IDBDriver.open(databaseKey);\n        return new IDBDriver(database);\n    }\n    /** Drops this database. */\n    static drop(databaseKey) {\n        return new Promise((resolve, reject) => {\n            const request = DBFactory().deleteDatabase(databaseKey);\n            request.addEventListener(\"error\", () => reject(request.error));\n            request.addEventListener(\"success\", () => resolve());\n        });\n    }\n}\nexports.IDBDriver = IDBDriver;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/database/driver.js?");

/***/ }),

/***/ "../smoke-node/public/bin/database/index.js":
/*!**************************************************!*\
  !*** ../smoke-node/public/bin/database/index.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar driver_1 = __webpack_require__(/*! ./driver */ \"../smoke-node/public/bin/database/driver.js\");\nexports.Reader = driver_1.Reader;\nvar database_1 = __webpack_require__(/*! ./database */ \"../smoke-node/public/bin/database/database.js\");\nexports.Database = database_1.Database;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/database/index.js?");

/***/ }),

/***/ "../smoke-node/public/bin/database/key.js":
/*!************************************************!*\
  !*** ../smoke-node/public/bin/database/key.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Provides key generation for database records.\n */\nclass Key {\n    /** Creates a new unique key of the uuidv4 form. */\n    static create() {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n            const r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    }\n}\nexports.Key = Key;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/database/key.js?");

/***/ }),

/***/ "../smoke-node/public/bin/hub/index.js":
/*!*********************************************!*\
  !*** ../smoke-node/public/bin/hub/index.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar page_1 = __webpack_require__(/*! ./page */ \"../smoke-node/public/bin/hub/page/index.js\");\nexports.PageHubServer = page_1.PageHubServer;\nvar page_2 = __webpack_require__(/*! ./page */ \"../smoke-node/public/bin/hub/page/index.js\");\nexports.PageHub = page_2.PageHub;\nvar network_1 = __webpack_require__(/*! ./network */ \"../smoke-node/public/bin/hub/network/index.js\");\nexports.NetworkHub = network_1.NetworkHub;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/hub/index.js?");

/***/ }),

/***/ "../smoke-node/public/bin/hub/network/client.js":
/*!******************************************************!*\
  !*** ../smoke-node/public/bin/hub/network/client.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst async_1 = __webpack_require__(/*! ../../async */ \"../smoke-node/public/bin/async/index.js\");\nconst async_2 = __webpack_require__(/*! ../../async */ \"../smoke-node/public/bin/async/index.js\");\nconst async_3 = __webpack_require__(/*! ../../async */ \"../smoke-node/public/bin/async/index.js\");\n/**\n * A network hub client. This type connects to a remote web socket running the\n * smoke signalling protocol. For a pre-built web socket host, see the smoke-hub\n * project.\n *\n * @example\n * ```bash\n *\n * $ npm install smoke-hub -g\n * $ smoke-hub --port 5000\n * ```\n * @example\n * ```typescript\n *\n * const hub = new NetworkHub('ws://localhost:5000')\n * ```\n */\nclass NetworkHub extends async_1.Events {\n    constructor(endpoint) {\n        super();\n        this.endpoint = endpoint;\n        this.barrier = new async_3.Barrier();\n        this.deferred = new async_2.Deferred();\n        this.socket = new WebSocket(this.endpoint);\n        this.request_id = 0;\n        this.socket.addEventListener('message', message => this.onMessage(message));\n        this.socket.addEventListener('error', error => this.onError(error));\n        this.socket.addEventListener('close', () => this.onClose());\n    }\n    on(event, func) {\n        super.on(event, func);\n    }\n    /** Returns the RTC configuration for this hub. */\n    configuration() {\n        return this.barrier.run(() => this.binding.configuration);\n    }\n    /** Returns the address of this hub. */\n    address() {\n        return this.barrier.run(() => this.binding.address);\n    }\n    /** Registers a hostname. */\n    register(hostname) {\n        return this.barrier.run(() => {\n            const type = 'register';\n            const request_id = this.request_id++;\n            this.socket.send(JSON.stringify({ type, request_id, hostname }));\n            return this.deferred.wait(request_id);\n        });\n    }\n    /** Looks up addresses with the given hostname. */\n    lookup(hostname) {\n        return this.barrier.run(() => {\n            const type = 'lookup';\n            const request_id = this.request_id++;\n            this.socket.send(JSON.stringify({ type, request_id, hostname }));\n            return this.deferred.wait(request_id);\n        });\n    }\n    /** Forwards the given message to the given 'to' address. */\n    forward(to, data) {\n        return this.barrier.run(() => {\n            const type = 'forward';\n            const from = this.binding.address;\n            this.socket.send(JSON.stringify({ to, from, type, data }));\n        });\n    }\n    /** Handles incoming message. */\n    onMessage(event) {\n        const message = JSON.parse(event.data);\n        switch (message.type) {\n            case 'binding':\n                this.onBinding(message);\n                break;\n            case 'forward':\n                this.onForward(message);\n                break;\n            case 'register-ok':\n                this.onRegisterOk(message);\n                break;\n            case 'register-fail':\n                this.onRegisterFail(message);\n                break;\n            case 'lookup-ok':\n                this.onLookupOk(message);\n                break;\n            case 'lookup-fail':\n                this.onLookupFail(message);\n                break;\n        }\n    }\n    /** Handles 'binding' messages. */\n    onBinding(message) {\n        this.binding = message;\n        this.barrier.resume();\n    }\n    /** Handles 'forward' messages. */\n    onForward(message) {\n        super.emit('forward', message);\n    }\n    /** Handles 'register-ok' messages. */\n    onRegisterOk(message) {\n        this.deferred.resolve(message.request_id, message);\n    }\n    /** Handles 'register-fail' messages. */\n    onRegisterFail(message) {\n        this.deferred.reject(message.request_id, message.reason);\n    }\n    /** Handles 'lookup-fail' messages. */\n    onLookupOk(message) {\n        this.deferred.resolve(message.request_id, message);\n    }\n    /** Handles 'lookup-fail' messages. */\n    onLookupFail(message) {\n        this.deferred.reject(message.request_id, message.reason);\n    }\n    /** Handles 'close' events. */\n    onClose() {\n        this.barrier.pause();\n        // todo: consider reconnection.\n    }\n    /** Handles 'close' events. */\n    onError(error) {\n        super.emit('error', error);\n    }\n    dispose() {\n        this.socket.close();\n    }\n}\nexports.NetworkHub = NetworkHub;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/hub/network/client.js?");

/***/ }),

/***/ "../smoke-node/public/bin/hub/network/index.js":
/*!*****************************************************!*\
  !*** ../smoke-node/public/bin/hub/network/index.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar client_1 = __webpack_require__(/*! ./client */ \"../smoke-node/public/bin/hub/network/client.js\");\nexports.NetworkHub = client_1.NetworkHub;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/hub/network/index.js?");

/***/ }),

/***/ "../smoke-node/public/bin/hub/page/client.js":
/*!***************************************************!*\
  !*** ../smoke-node/public/bin/hub/page/client.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst async_1 = __webpack_require__(/*! ../../async */ \"../smoke-node/public/bin/async/index.js\");\nconst async_2 = __webpack_require__(/*! ../../async */ \"../smoke-node/public/bin/async/index.js\");\nconst async_3 = __webpack_require__(/*! ../../async */ \"../smoke-node/public/bin/async/index.js\");\nconst sockets_1 = __webpack_require__(/*! ./sockets */ \"../smoke-node/public/bin/hub/page/sockets/index.js\");\n/**\n * An in page signalling hub client. Used to communicate with the in-page\n * signalling hub. Used as a default hub when smoke nodes are not given\n * smoke-hub endpoints to connect to.\n */\nclass PageHub extends async_1.Events {\n    /** Connects to a PageServerHub on the given port. */\n    constructor(port) {\n        super();\n        this.port = port;\n        this.barrier = new async_3.Barrier();\n        this.deferred = new async_2.Deferred();\n        this.socket = sockets_1.connect(this.port);\n        this.request_id = 0;\n        this.socket.on('message', (message) => this.onMessage(message));\n        this.socket.on('error', error => this.onError(error));\n        this.socket.on('close', () => this.onClose());\n    }\n    on(event, func) {\n        super.on(event, func);\n    }\n    /** Returns the RTC configuration for this hub. */\n    configuration() {\n        return this.barrier.run(() => this.binding.configuration);\n    }\n    /** Returns the address of this hub. */\n    address() {\n        return this.barrier.run(() => this.binding.address);\n    }\n    /** Registers a hostname. */\n    register(hostname) {\n        return this.barrier.run(() => {\n            const type = 'register';\n            const request_id = this.request_id++;\n            this.socket.send(JSON.stringify({ type, request_id, hostname }));\n            return this.deferred.wait(request_id);\n        });\n    }\n    /** Looks up addresses with the given hostname. */\n    lookup(hostname) {\n        return this.barrier.run(() => {\n            const type = 'lookup';\n            const request_id = this.request_id++;\n            this.socket.send(JSON.stringify({ type, request_id, hostname }));\n            return this.deferred.wait(request_id);\n        });\n    }\n    /** Forwards the given message to the given 'to' address. */\n    forward(to, data) {\n        return this.barrier.run(() => {\n            const type = 'forward';\n            const from = this.binding.address;\n            this.socket.send(JSON.stringify({ to, from, type, data }));\n        });\n    }\n    /** Handles 'message' events. (note: event is synthetic in page sockets) */\n    onMessage(event) {\n        const message = JSON.parse(event.data);\n        switch (message.type) {\n            case 'binding':\n                this.onBinding(message);\n                break;\n            case 'forward':\n                this.onForward(message);\n                break;\n            case 'register-ok':\n                this.onRegisterOk(message);\n                break;\n            case 'register-fail':\n                this.onRegisterFail(message);\n                break;\n            case 'lookup-ok':\n                this.onLookupOk(message);\n                break;\n            case 'lookup-fail':\n                this.onLookupFail(message);\n                break;\n        }\n    }\n    /** Handles `binding` messages. */\n    onBinding(message) {\n        this.binding = message;\n        this.barrier.resume();\n    }\n    /** Handles `forward` messages. */\n    onForward(message) {\n        super.emit('forward', message);\n    }\n    /** Handles `register-ok` messages. */\n    onRegisterOk(message) {\n        this.deferred.resolve(message.request_id, message);\n    }\n    /** Handles `register-fail` messages. */\n    onRegisterFail(message) {\n        this.deferred.reject(message.request_id, message.reason);\n    }\n    /** Handles `lookup-ok` messages. */\n    onLookupOk(message) {\n        this.deferred.resolve(message.request_id, message);\n    }\n    /** Handles `lookup-fail` messages. */\n    onLookupFail(message) {\n        this.deferred.reject(message.request_id, message.reason);\n    }\n    /** Handles socket 'close' events. */\n    onClose() {\n        // todo: consider reconnection here.\n        this.barrier.pause();\n    }\n    /** Handles close events. */\n    onError(error) {\n        super.emit('error', error);\n    }\n    /** Disposes of this object. */\n    dispose() {\n        this.socket.dispose();\n        super.dispose();\n    }\n}\nexports.PageHub = PageHub;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/hub/page/client.js?");

/***/ }),

/***/ "../smoke-node/public/bin/hub/page/dhcp.js":
/*!*************************************************!*\
  !*** ../smoke-node/public/bin/hub/page/dhcp.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-hub\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// -------------------------------------------------------------------------\n//\n// Dhcp\n//\n// Dhcp emulation. Allocates IPv4 like addresses on behalf of connecting nodes.\n//\n// -------------------------------------------------------------------------\nclass Dhcp {\n    constructor() {\n        this.index = 0;\n    }\n    /** Fetches the next IP address in the sequence. */\n    next() {\n        this.index += 1;\n        const bounds = [256, 256, 256, 256];\n        const address = bounds.reduce((state, rank, index) => {\n            state[0][index] = Math.floor((this.index / state[1]) % rank);\n            state[1] *= rank;\n            return state;\n        }, [Array.from({ length: bounds.length }), 1])[0];\n        return address.reverse().join('.');\n    }\n}\nexports.Dhcp = Dhcp;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/hub/page/dhcp.js?");

/***/ }),

/***/ "../smoke-node/public/bin/hub/page/index.js":
/*!**************************************************!*\
  !*** ../smoke-node/public/bin/hub/page/index.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-hub\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar server_1 = __webpack_require__(/*! ./server */ \"../smoke-node/public/bin/hub/page/server.js\");\nexports.PageHubServer = server_1.PageHubServer;\nvar client_1 = __webpack_require__(/*! ./client */ \"../smoke-node/public/bin/hub/page/client.js\");\nexports.PageHub = client_1.PageHub;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/hub/page/index.js?");

/***/ }),

/***/ "../smoke-node/public/bin/hub/page/server.js":
/*!***************************************************!*\
  !*** ../smoke-node/public/bin/hub/page/server.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst sockets_1 = __webpack_require__(/*! ./sockets */ \"../smoke-node/public/bin/hub/page/sockets/index.js\");\nconst dhcp_1 = __webpack_require__(/*! ./dhcp */ \"../smoke-node/public/bin/hub/page/dhcp.js\");\n/**\n * An in page signalling hub used to facilicate multiple nodes being creating\n * in a page without the need to reach out to a wider network. This type is\n * used when not specifying a web socket endpoint for the smoke node to connect\n * to. It is also used for examples and interactive tests in page.\n */\nclass PageHubServer {\n    constructor(configuration) {\n        this.configuration = configuration;\n        this.sockets = new Map();\n        this.hostnames = new Map();\n        this.dhcp = new dhcp_1.Dhcp();\n    }\n    /** Handles incoming connections */\n    onConnection(socket) {\n        const configuration = this.configuration;\n        const address = this.dhcp.next();\n        const type = 'binding';\n        socket.on('message', message => this.onMessage(address, message));\n        socket.on('error', error => this.onError(address, error));\n        socket.on('close', () => this.onClose(address));\n        socket.send(JSON.stringify({ type, address, configuration }));\n        this.sockets.set(address, socket);\n    }\n    /** Handles an incoming message from the given address. */\n    onMessage(address, data) {\n        try {\n            const message = JSON.parse(data.data);\n            switch (message.type) {\n                case 'forward':\n                    return this.onForward(address, message);\n                case 'register':\n                    return this.onRegister(address, message);\n                case 'lookup':\n                    return this.onLookup(address, message);\n            }\n        }\n        catch {\n            const socket = this.sockets.get(address);\n            socket.close();\n            this.sockets.delete(address);\n        }\n    }\n    /** Handles an incoming forward request. */\n    onForward(address, forward) {\n        if (this.sockets.has(forward.to)) {\n            const socket = this.sockets.get(forward.to);\n            const type = 'forward';\n            const from = address;\n            const to = forward.to;\n            const data = forward.data;\n            socket.send(JSON.stringify({ type, from, to, data }));\n        }\n    }\n    /** Handles register requests. */\n    onRegister(address, register) {\n        const socket = this.sockets.get(address);\n        if (this.hostnames.has(register.hostname)) {\n            const type = 'register-fail';\n            const request_id = register.request_id;\n            const reason = `hostname '${register.hostname}' already registered`;\n            socket.send(JSON.stringify({ type, request_id, reason }));\n            return;\n        }\n        // only one hostname per address.\n        for (const hostname of this.hostnames.keys()) {\n            const addr = this.hostnames.get(hostname);\n            if (addr === address) {\n                this.hostnames.delete(hostname);\n            }\n        }\n        this.hostnames.set(register.hostname, address);\n        const type = 'register-ok';\n        const request_id = register.request_id;\n        const hostname = register.hostname;\n        socket.send(JSON.stringify({ type, request_id, hostname }));\n    }\n    /** Handles lookup requests. */\n    onLookup(address, lookup) {\n        const socket = this.sockets.get(address);\n        const type = 'lookup-ok';\n        const request_id = lookup.request_id;\n        const addresses = this.hostnames.has(lookup.hostname)\n            ? [this.hostnames.get(lookup.hostname)]\n            : this.sockets.has(lookup.hostname)\n                ? [lookup.hostname]\n                : [];\n        return socket.send(JSON.stringify({ type, request_id, addresses }));\n    }\n    /** Handles socket on error events. */\n    onError(address, error) {\n        console.error(address, error);\n    }\n    /** Handles socket on close events. */\n    onClose(address) {\n        this.sockets.delete(address);\n        for (const hostname of this.hostnames.keys()) {\n            const addr = this.hostnames.get(hostname);\n            if (addr === address) {\n                this.hostnames.delete(hostname);\n            }\n        }\n    }\n    /** Starts this server listening on the given port. */\n    listen(port) {\n        this.server = sockets_1.createServer(socket => {\n            this.onConnection(socket);\n        }).listen(port);\n    }\n    /** Disposes of this object. */\n    dispose() {\n        this.server.dispose();\n    }\n}\nexports.PageHubServer = PageHubServer;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/hub/page/server.js?");

/***/ }),

/***/ "../smoke-node/public/bin/hub/page/sockets/bus.js":
/*!********************************************************!*\
  !*** ../smoke-node/public/bin/hub/page/sockets/bus.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst async_1 = __webpack_require__(/*! ../../../async */ \"../smoke-node/public/bin/async/index.js\");\n// --------------------------------------------------------------------------\n//\n// Bus\n//\n// Simple messaging back-plane for in-memory socket servers and clients. \n// Subscribed on by both sides to faciliate messaging exchange with the\n// event 'topic' used as a subscription channel for either side.\n//\n// --------------------------------------------------------------------------\nexports.Bus = new async_1.Events();\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/hub/page/sockets/bus.js?");

/***/ }),

/***/ "../smoke-node/public/bin/hub/page/sockets/index.js":
/*!**********************************************************!*\
  !*** ../smoke-node/public/bin/hub/page/sockets/index.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst server_1 = __webpack_require__(/*! ./server */ \"../smoke-node/public/bin/hub/page/sockets/server.js\");\nexports.Server = server_1.Server;\nconst socket_1 = __webpack_require__(/*! ./socket */ \"../smoke-node/public/bin/hub/page/sockets/socket.js\");\nexports.Socket = socket_1.Socket;\n/** Creates a page socket server. */\nfunction createServer(func) {\n    return new server_1.Server(func);\n}\nexports.createServer = createServer;\n/** Connects to a page socket server. */\nfunction connect(port) {\n    return socket_1.Socket.connect(port);\n}\nexports.connect = connect;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/hub/page/sockets/index.js?");

/***/ }),

/***/ "../smoke-node/public/bin/hub/page/sockets/server.js":
/*!***********************************************************!*\
  !*** ../smoke-node/public/bin/hub/page/sockets/server.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst bus_1 = __webpack_require__(/*! ./bus */ \"../smoke-node/public/bin/hub/page/sockets/bus.js\");\nconst socket_1 = __webpack_require__(/*! ./socket */ \"../smoke-node/public/bin/hub/page/sockets/socket.js\");\n// --------------------------------------------------------------------------\n//\n// Server\n//\n// A virtual web socket server designed to run in page. Used to emulate\n// a actual network socket connection for nodes that need to run in page\n// without connecting to a wider network.\n//\n// --------------------------------------------------------------------------\nclass Server {\n    /** Creates a new server. */\n    constructor(func) {\n        this.func = func;\n        this.channel = 0;\n        this.sockets = new Map();\n    }\n    /** Starts this server listening on the given port. */\n    listen(port) {\n        // Subscribe to 'connect' messages on on the given\n        // bus channel. Messages received over here are\n        // incoming socket connections.\n        bus_1.Bus.on(`${port}:server:connect`, data => {\n            const channel = this.channel;\n            // Setup socket with the sockets `write` and `close`\n            // function used to transmit an event message\n            // back out over the bus.\n            const socket = new socket_1.Socket(data => setTimeout(() => {\n                bus_1.Bus.emit(`${port}:${channel}:client:message`, data);\n            }, 0), () => setTimeout(() => {\n                bus_1.Bus.emit(`${port}:${channel}:client:close`);\n                socket.dispose();\n            }, 0));\n            // Setup listeners for events received from clients\n            // over the bus. Note: The `channel` is made known\n            // to the client following sending an `connect`\n            // message below.\n            bus_1.Bus.on(`${port}:${channel}:server:message`, (data) => {\n                socket.emit('message', { data });\n            });\n            bus_1.Bus.on(`${port}:${channel}:server:close`, () => {\n                this.sockets.delete(channel);\n                socket.emit('close');\n                socket.dispose();\n            });\n            // Add the socket to a pool of sockets, this\n            // allows this server to disconnect connected\n            // sockets on `dispose`.\n            this.sockets.set(channel, socket);\n            // Emit socket to server listener, send connect\n            // to client, increment the channel index.\n            bus_1.Bus.emit(`${port}:client:connect`, channel);\n            this.func(socket);\n            this.channel += 1;\n        });\n        return this;\n    }\n    /** Disposes of this object. */\n    dispose() {\n        for (const channel of this.sockets.keys()) {\n            const socket = this.sockets.get(channel);\n            socket.emit('close');\n            socket.dispose();\n            this.sockets.delete(channel);\n        }\n    }\n}\nexports.Server = Server;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/hub/page/sockets/server.js?");

/***/ }),

/***/ "../smoke-node/public/bin/hub/page/sockets/socket.js":
/*!***********************************************************!*\
  !*** ../smoke-node/public/bin/hub/page/sockets/socket.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst async_1 = __webpack_require__(/*! ../../../async */ \"../smoke-node/public/bin/async/index.js\");\nconst bus_1 = __webpack_require__(/*! ./bus */ \"../smoke-node/public/bin/hub/page/sockets/bus.js\");\n// --------------------------------------------------------------------------\n//\n// Socket\n//\n// A virtual web socket.\n//\n// --------------------------------------------------------------------------\nclass Socket extends async_1.Events {\n    constructor(sendFunction, closeFunction) {\n        super();\n        this.sendFunction = sendFunction;\n        this.closeFunction = closeFunction;\n        this.disposed = false;\n    }\n    /** Subscribes to events on this socket once.  */\n    once(event, func) {\n        super.once(event, func);\n    }\n    /** Subscribes to events on this socket.  */\n    on(event, func) {\n        super.on(event, func);\n    }\n    /** Sends a message to this socket.  */\n    send(data) {\n        if (this.disposed) {\n            throw Error('cannot send to disposed socket.');\n        }\n        this.sendFunction(data);\n    }\n    /** Closes this socket. */\n    close() {\n        this.dispose();\n    }\n    /** Disposes of this socket. */\n    dispose() {\n        if (!this.disposed) {\n            this.disposed = true;\n            this.closeFunction();\n            super.dispose();\n        }\n    }\n    /** Connects to a virtualized socket server on the given port. */\n    static connect(port) {\n        let channel;\n        // Create outbound socket to server. Note that the\n        // `channel` will be `undefined` until such time as\n        // the client has successfully connected.\n        const socket = new Socket((message) => setTimeout(() => {\n            bus_1.Bus.emit(`${port}:${channel}:server:message`, message);\n        }, 0), () => setTimeout(() => {\n            bus_1.Bus.emit(`${port}:${channel}:server:close`);\n            socket.dispose();\n        }, 0));\n        // Sets up a timeout to handle connection attempts to\n        // non responding ports. This timeout is cleared on\n        // server response.\n        const timeout = setTimeout(() => {\n            socket.emit('error', new Error('socket connect timeout'));\n            socket.emit('close');\n            socket.dispose();\n        }, 100);\n        // Create outbound socket to server. Note that the\n        // `channel` will be `undefined` until such time as\n        // the client has successfully connected.\n        setTimeout(() => {\n            bus_1.Bus.emit(`${port}:server:connect`);\n            bus_1.Bus.once(`${port}:client:connect`, (ch) => {\n                channel = ch;\n                clearTimeout(timeout);\n                // Emit messages received over this bus channel to\n                // the socket. Closed messages result in the termination\n                // of this socket.\n                bus_1.Bus.on(`${port}:${channel}:client:message`, (data) => {\n                    socket.emit('message', { data });\n                });\n                bus_1.Bus.on(`${port}:${channel}:client:close`, () => {\n                    socket.emit('close');\n                    socket.dispose();\n                });\n                // Emit 'emit'\n                socket.emit('open');\n            });\n        });\n        return socket;\n    }\n}\nexports.Socket = Socket;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/hub/page/sockets/socket.js?");

/***/ }),

/***/ "../smoke-node/public/bin/index.js":
/*!*****************************************!*\
  !*** ../smoke-node/public/bin/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// -----------------------------------------------------------------------------\n//\n// Async Primitives\n//\n// -----------------------------------------------------------------------------\nvar async_1 = __webpack_require__(/*! ./async */ \"../smoke-node/public/bin/async/index.js\");\nexports.Barrier = async_1.Barrier;\nexports.Deferred = async_1.Deferred;\nexports.Events = async_1.Events;\nexports.Semaphore = async_1.Semaphore;\n// -----------------------------------------------------------------------------\n//\n// Path QueryString Url\n//\n// -----------------------------------------------------------------------------\nvar querystring_1 = __webpack_require__(/*! ./querystring */ \"../smoke-node/public/bin/querystring/index.js\");\nexports.QueryString = querystring_1.QueryString;\nvar path_1 = __webpack_require__(/*! ./path */ \"../smoke-node/public/bin/path/index.js\");\nexports.Path = path_1.Path;\nvar url_1 = __webpack_require__(/*! ./url */ \"../smoke-node/public/bin/url/index.js\");\nexports.Url = url_1.Url;\n// -----------------------------------------------------------------------------\n//\n// Buffers, Streams and Queryable\n//\n// -----------------------------------------------------------------------------\nvar buffer_1 = __webpack_require__(/*! ./buffer */ \"../smoke-node/public/bin/buffer/index.js\");\nexports.Buffer = buffer_1.Buffer;\nvar streams_1 = __webpack_require__(/*! ./streams */ \"../smoke-node/public/bin/streams/index.js\");\nexports.Readable = streams_1.Readable;\nexports.Writable = streams_1.Writable;\nvar queryable_1 = __webpack_require__(/*! ./queryable */ \"../smoke-node/public/bin/queryable/index.js\");\nexports.Queryable = queryable_1.Queryable;\n// -----------------------------------------------------------------------------\n//\n// System\n//\n// -----------------------------------------------------------------------------\nvar system_1 = __webpack_require__(/*! ./system */ \"../smoke-node/public/bin/system/index.js\");\nexports.System = system_1.System;\n// -----------------------------------------------------------------------------\n//\n// Database\n//\n// -----------------------------------------------------------------------------\nvar database_1 = __webpack_require__(/*! ./database */ \"../smoke-node/public/bin/database/index.js\");\nexports.Database = database_1.Database;\n// -----------------------------------------------------------------------------\n//\n// Network\n//\n// -----------------------------------------------------------------------------\nvar hub_1 = __webpack_require__(/*! ./hub */ \"../smoke-node/public/bin/hub/index.js\");\nexports.PageHub = hub_1.PageHub;\nexports.NetworkHub = hub_1.NetworkHub;\nvar network_1 = __webpack_require__(/*! ./network */ \"../smoke-node/public/bin/network/index.js\");\nexports.Network = network_1.Network;\nvar sockets_1 = __webpack_require__(/*! ./sockets */ \"../smoke-node/public/bin/sockets/index.js\");\nexports.Sockets = sockets_1.Sockets;\nexports.SocketServer = sockets_1.SocketServer;\nexports.Socket = sockets_1.Socket;\nexports.NetworkStream = sockets_1.NetworkStream;\nvar rest_1 = __webpack_require__(/*! ./rest */ \"../smoke-node/public/bin/rest/index.js\");\nexports.Rest = rest_1.Rest;\nexports.Fetch = rest_1.Fetch;\nexports.FetchRequest = rest_1.FetchRequest;\nexports.FetchResponse = rest_1.FetchResponse;\nexports.Router = rest_1.Router;\nexports.Route = rest_1.Route;\nexports.RestServer = rest_1.RestServer;\nexports.RestRequest = rest_1.RestRequest;\nexports.RestResponse = rest_1.RestResponse;\n// -----------------------------------------------------------------------------\n//\n// Smoke\n//\n// -----------------------------------------------------------------------------\nvar node_1 = __webpack_require__(/*! ./node */ \"../smoke-node/public/bin/node.js\");\nexports.Node = node_1.Node;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/index.js?");

/***/ }),

/***/ "../smoke-node/public/bin/media/index.js":
/*!***********************************************!*\
  !*** ../smoke-node/public/bin/media/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar media_1 = __webpack_require__(/*! ./media */ \"../smoke-node/public/bin/media/media.js\");\nexports.Media = media_1.Media;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/media/index.js?");

/***/ }),

/***/ "../smoke-node/public/bin/media/media.js":
/*!***********************************************!*\
  !*** ../smoke-node/public/bin/media/media.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst webrtc_1 = __webpack_require__(/*! ./webrtc */ \"../smoke-node/public/bin/media/webrtc.js\");\nconst mse_1 = __webpack_require__(/*! ./mse */ \"../smoke-node/public/bin/media/mse.js\");\n/**\n * Provides interface for creating and generating MediaStream and MediaSource\n * objects for video playback and streaming. This namespace deals with both\n * the WebRTC MediaStream API as well as the Media Source Extension API.\n */\nclass Media {\n    /**\n     * Generates a live video feed from a background captureStream(). Useful for\n     * testing mediastream pass-through over webrtc.\n     *\n     * @example\n     *\n     * ```typescript\n     *\n     * const mediastream = media.createTestPattern()\n     * const video = document.getElementById('video-id')\n     * video.srcObject = mediastream\n     * video.play()\n     * ```\n     */\n    createTestPattern() {\n        return webrtc_1.WebRTC.createTestPattern();\n    }\n    /**\n     * Creates a MediaSource from the given Readable<Buffer>. Accepts a codec type\n     * for playback of 'webm' and 'mp4' content only.\n     *\n     * @example\n     *\n     * ```typescript\n     *\n     * const readable = files.readable('/video.webm')\n     * const mediasource = media.createMediaSource(readable, 'webm')\n     * const video = document.getElementById('video-id')\n     * video.src = URL.createObjectURL(mediasource)\n     * video.play()\n     * ```\n     */\n    createMediaSource(readable, codec) {\n        return mse_1.MediaSourceExtensions.createMediaSource(readable, codec);\n    }\n}\nexports.Media = Media;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/media/media.js?");

/***/ }),

/***/ "../smoke-node/public/bin/media/mse.js":
/*!*********************************************!*\
  !*** ../smoke-node/public/bin/media/mse.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Provides functionality over the Media Source Extensions API.\n */\nclass MediaSourceExtensions {\n    static resolveCodec(codec) {\n        switch (codec) {\n            case 'mp4': return 'video/mp4; codecs=\"avc1.640029, mp4a.40.5\"';\n            case 'webm': return 'video/webm; codecs=\"vp8, vorbis\"';\n            default: throw Error(`Unknown media codec type ${codec}`);\n        }\n    }\n    static async writeSourceBuffer(readable, buffer) {\n        const { done, value } = await readable.read();\n        if (!done) {\n            buffer.appendBuffer(value);\n            return value.length;\n        }\n        else {\n            return 0;\n        }\n    }\n    /**\n     * Creates a MediaSource from the given Readable<Buffer>. Accepts a codec type\n     * for playback of 'webm' and 'mp4' content only.\n     */\n    static createMediaSource(readable, codec) {\n        const mediasource = new MediaSource();\n        mediasource.addEventListener('sourceopen', async () => {\n            const buffer = mediasource.addSourceBuffer(this.resolveCodec(codec));\n            buffer.mode = 'sequence';\n            buffer.addEventListener('updateend', async () => {\n                const written = await this.writeSourceBuffer(readable, buffer);\n                if (written === 0) {\n                    mediasource.endOfStream();\n                }\n            });\n            const written = await this.writeSourceBuffer(readable, buffer);\n            if (written === 0) {\n                mediasource.endOfStream();\n            }\n        });\n        return mediasource;\n    }\n}\nexports.MediaSourceExtensions = MediaSourceExtensions;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/media/mse.js?");

/***/ }),

/***/ "../smoke-node/public/bin/media/webrtc.js":
/*!************************************************!*\
  !*** ../smoke-node/public/bin/media/webrtc.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass WebRTC {\n    /** Generates a live MediaStream test pattern. */\n    static createTestPattern() {\n        const canvas = document.createElement('canvas');\n        canvas.width = 1024;\n        canvas.height = 768;\n        const context = canvas.getContext('2d');\n        setInterval(() => {\n            const r = Math.floor(Math.random() * 255);\n            const g = Math.floor(Math.random() * 255);\n            const b = Math.floor(Math.random() * 255);\n            context.fillStyle = `rgb(${r}, ${g}, ${b})`;\n            context.fillRect(0, 0, 100, 100);\n        }, 10);\n        const facade = canvas;\n        return facade['captureStream'](30);\n    }\n}\nexports.WebRTC = WebRTC;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/media/webrtc.js?");

/***/ }),

/***/ "../smoke-node/public/bin/network/index.js":
/*!*************************************************!*\
  !*** ../smoke-node/public/bin/network/index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar network_1 = __webpack_require__(/*! ./network */ \"../smoke-node/public/bin/network/network.js\");\nexports.Network = network_1.Network;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/network/index.js?");

/***/ }),

/***/ "../smoke-node/public/bin/network/network.js":
/*!***************************************************!*\
  !*** ../smoke-node/public/bin/network/network.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/** Creates a timeout that throws with the given error message. */\nfunction timeout(ms, message = 'timeout') {\n    return new Promise((_, reject) => {\n        setTimeout(() => reject(new Error(message)), ms);\n    });\n}\n/** Receives exactly one message from this data channel. */\nfunction receive(channel, eventName) {\n    return new Promise(resolve => {\n        channel.addEventListener(eventName, function handler(event) {\n            channel.removeEventListener(eventName, handler);\n            resolve(event);\n        });\n    });\n}\nvar Loopback;\n(function (Loopback) {\n    Loopback[Loopback[\"None\"] = 0] = \"None\";\n    Loopback[Loopback[\"Sender\"] = 1] = \"Sender\";\n    Loopback[Loopback[\"Receiver\"] = 2] = \"Receiver\";\n})(Loopback || (Loopback = {}));\nconst loopbackSwitch = (loopback) => loopback === Loopback.Receiver ? Loopback.Sender :\n    loopback === Loopback.Sender ? Loopback.Receiver :\n        loopback;\nclass NegotiateError extends Error {\n    constructor(local, remote, error, sdp) {\n        super(`local: ${local} remote: ${remote} error: ${error.message}`);\n        this.local = local;\n        this.remote = remote;\n        this.error = error;\n        this.sdp = sdp;\n    }\n}\nexports.NegotiateError = NegotiateError;\nclass SignallingError extends Error {\n    constructor(remote, error) {\n        super(`remote: ${remote} error: ${error.message}`);\n        this.remote = remote;\n        this.error = error;\n    }\n}\nexports.SignallingError = SignallingError;\nclass PortInUseError extends Error {\n    constructor(port) {\n        super(`The port '${port}' is already in use.`);\n        this.port = port;\n    }\n}\nexports.PortInUseError = PortInUseError;\n/**\n * A webrtc peer connection and negotiation layer. This type is intended\n * to handle the details of peers, peer signalling, port binding and\n * client loopback. This type is used by RTC consumers to interact with\n * peer connections without dealing with the details of ICE.\n */\nclass Network {\n    constructor(hub) {\n        this.hub = hub;\n        this.hub.on('forward', forward => this.onForward(forward));\n        this.ports = new Map();\n        this.peers = new Map();\n        this.createLoopback();\n    }\n    /** Gets the address of this peer on the network. */\n    address() {\n        return this.hub.address();\n    }\n    /** Gets all peers managed by this driver. */\n    getPeers() {\n        return this.peers;\n    }\n    /**\n     * Connects to a remote endpoint and returns a Peer and RTCDataChannel. This\n     * function handles connection negotiate with the remote peer as well as\n     * handling network timeouts and remote port reject. The data channel\n     * returned from this function is given in an 'open' state ready for use.\n     */\n    async connect(remote, port) {\n        remote = (remote === await this.hub.address() || remote === 'localhost') ? 'localhost:1' : remote;\n        const peer = await this.getPeer(remote);\n        const channel = peer.connection.createDataChannel(port);\n        channel.binaryType = 'arraybuffer';\n        // wait for connection\n        await Promise.race([\n            timeout(4000, `Connection to host '${peer.remote}' timed out.`),\n            receive(channel, 'open')\n        ]);\n        // wait for accept | reject\n        const response = await Promise.race([\n            timeout(4000, `${peer.remote}' is not responding.`),\n            receive(channel, 'message')\n        ]).then(response => new Uint8Array(response.data));\n        // resolve or reject\n        if (response[0] === 1) {\n            channel.close();\n            throw Error(`'${peer.remote}' forcefully closed this connection.`);\n        }\n        else {\n            return [peer, channel];\n        }\n    }\n    /**\n     * Binds the given port to accept remote peer connections on. Data channels\n     * passed on this callback passed in an 'open' state ready for immediate use.\n     */\n    bindPort(port, callback) {\n        if (this.ports.has(port)) {\n            throw new PortInUseError(port);\n        }\n        this.ports.set(port, callback);\n    }\n    /**\n     * Unbinds the given port preventing further connections to be received on\n     * this port. This function does not close existing connections on the port,\n     * so callers will need to explicitly terminate all active connections\n     * manually.\n     */\n    unbindPort(port) {\n        this.ports.delete(port);\n    }\n    /** Disposes of this object. */\n    dispose() {\n        for (const key of this.peers.keys()) {\n            const peer = this.peers.get(key);\n            peer.connection.close();\n            this.peers.delete(key);\n        }\n    }\n    // #region Peer resolver\n    /** Gets or creates a peer to the remote endpoint. */\n    async getPeer(remote) {\n        remote = await this.resolveAddressOrHostname(remote);\n        const configuration = await this.hub.configuration();\n        const local = await this.hub.address();\n        if (!this.peers.has(remote)) {\n            const connection = new RTCPeerConnection(configuration);\n            const loopback = Loopback.None;\n            const peer = { connection, local, remote, loopback };\n            connection.addEventListener('negotiationneeded', event => this.onNegotiationNeeded(peer, event));\n            connection.addEventListener('icecandidate', event => this.onIceCandidate(peer, event));\n            connection.addEventListener('datachannel', event => this.onDataChannel(peer, event));\n            this.peers.set(remote, peer);\n        }\n        return this.peers.get(remote);\n    }\n    // #region Signalling\n    /**\n     * Forwards a signalling message over to a remote host. This function tries\n     * to optimize here by detecting forwards on localhost. These are intercepted\n     * before making to the signalling hub.\n     */\n    async forward(remote, data) {\n        if (remote === 'localhost') {\n            const type = 'forward';\n            const from = 'localhost';\n            const to = 'localhost';\n            return this.onForward({ type, to, from, data });\n        }\n        this.hub.forward(remote, data);\n    }\n    /**\n     * Dispatches incoming forwarded messages out to their respective handlers.\n     */\n    onForward(request) {\n        switch (request.data.type) {\n            case 'candidate':\n                this.onCandidate(request);\n                break;\n            case 'answer':\n                this.onAnswer(request);\n                break;\n            case 'offer':\n                this.onOffer(request);\n                break;\n        }\n    }\n    /**\n     * Handles incoming offers from remote peers\n     */\n    async onOffer(request) {\n        try {\n            const peer = await this.getPeer(this.resolveLoopbackTarget(request));\n            await peer.connection.setRemoteDescription(request.data.sdp);\n            const sdp = await peer.connection.createAnswer();\n            const loopback = loopbackSwitch(request.data.loopback);\n            await peer.connection.setLocalDescription(sdp);\n            await this.forward(request.from, { type: 'answer', sdp, loopback });\n        }\n        catch (error) {\n            const local = request.to;\n            const remote = request.from;\n            console.warn(new NegotiateError(local, remote, error, request.data.sdp));\n        }\n    }\n    /**\n     * Handles incoming answers from remote peers\n     */\n    async onAnswer(request) {\n        try {\n            const peer = await this.getPeer(this.resolveLoopbackTarget(request));\n            await peer.connection.setRemoteDescription(request.data.sdp);\n        }\n        catch (error) {\n            console.warn(new NegotiateError(request.to, request.from, error, request.data.sdp));\n        }\n    }\n    /**\n     * Handles incoming candidates from remote peers\n     */\n    async onCandidate(request) {\n        try {\n            const peer = await this.getPeer(this.resolveLoopbackTarget(request));\n            await peer.connection.addIceCandidate(request.data.candidate);\n        }\n        catch (error) {\n            console.warn(new NegotiateError(request.to, request.from, error, request.data.candidate));\n        }\n    }\n    // #region RTCPeerConnection events\n    async onNegotiationNeeded(peer, event) {\n        try {\n            const sdp = await peer.connection.createOffer();\n            const loopback = peer.loopback;\n            await peer.connection.setLocalDescription(sdp);\n            await this.forward(peer.remote, { type: 'offer', sdp, loopback });\n        }\n        catch (error) {\n            const local = peer.local;\n            const remote = peer.remote;\n            console.warn(new NegotiateError(local, remote, error));\n        }\n    }\n    onIceCandidate(peer, event) {\n        if (event.candidate === null) {\n            return;\n        }\n        try {\n            const candidate = event.candidate;\n            const loopback = peer.loopback;\n            this.forward(peer.remote, { type: 'candidate', candidate, loopback });\n        }\n        catch (error) {\n            console.error(new NegotiateError(peer.local, peer.remote, error));\n        }\n    }\n    /**\n     * Receives an incoming data channel from a remote peer. This function will\n     * tests that this peer is listening on the given port, and if so, emits\n     * to that ports listener, otherwise, the socket is sent a rejection signal\n     * and closed.\n     */\n    async onDataChannel(peer, event) {\n        const port = event.channel.label;\n        const channel = event.channel;\n        channel.binaryType = 'arraybuffer';\n        try {\n            await Promise.race([\n                timeout(2000, `Received connection from ${peer.remote} failed to open.`),\n                receive(channel, 'open')\n            ]);\n            if (!this.ports.has(port)) {\n                channel.send(new Uint8Array([1]));\n                channel.close();\n            }\n            else {\n                channel.send(new Uint8Array([0]));\n                const callback = this.ports.get(port);\n                callback([peer, channel]);\n            }\n        }\n        catch {\n            /** ignore */\n        }\n    }\n    // #region Loopback and Routing\n    /**\n     * Sets up the peer connections for localhost. localhost:0 is for outbound\n     * connections, localhost:1 is for inbound. Therefore when connections are\n     * created on localhost, they are always connecting to the localhost:1\n     * connection.\n     */\n    createLoopback() {\n        {\n            const connection = new RTCPeerConnection();\n            const loopback = Loopback.Sender;\n            const local = 'localhost';\n            const remote = 'localhost';\n            const peer = { connection, local, remote, loopback };\n            connection.addEventListener('negotiationneeded', event => this.onNegotiationNeeded(peer, event));\n            connection.addEventListener('icecandidate', event => this.onIceCandidate(peer, event));\n            connection.addEventListener('datachannel', event => this.onDataChannel(peer, event));\n            this.peers.set('localhost:0', peer);\n        }\n        {\n            const connection = new RTCPeerConnection();\n            const loopback = Loopback.Receiver;\n            const local = 'localhost';\n            const remote = 'localhost';\n            const peer = { connection, local, remote, loopback };\n            connection.addEventListener('negotiationneeded', event => this.onNegotiationNeeded(peer, event));\n            connection.addEventListener('icecandidate', event => this.onIceCandidate(peer, event));\n            connection.addEventListener('datachannel', event => this.onDataChannel(peer, event));\n            this.peers.set('localhost:1', peer);\n        }\n    }\n    /**\n     * Resolves the loopback target. This function acts as a switch which flips\n     * between localhost:0 and localhost:1 if the loopback happens to be on\n     * localhost. Used during connection negotiate.\n     */\n    resolveLoopbackTarget(request) {\n        return request.data.loopback === Loopback.Sender ? 'localhost:1' :\n            request.data.loopback === Loopback.Receiver ? 'localhost:0' :\n                request.from;\n    }\n    /**\n     * Resolves the hostname via hub lookup. If not found, just return\n     * the hostname. It may be preferable to just 'throw' if not found and\n     * alert to the user that the route to host is unreachable. Current\n     * downstream socket and rest behaviours will deal in timeout, we could\n     * handle both.\n     */\n    async resolveAddressOrHostname(hostname) {\n        const local = await this.hub.address();\n        const lookup = await this.hub.lookup(hostname);\n        const length = lookup.addresses.length;\n        const resolved = (length > 0)\n            ? lookup.addresses[Math.floor(Math.random() * length)]\n            : hostname;\n        return (resolved !== local)\n            ? resolved\n            : 'localhost:1';\n    }\n}\nexports.Network = Network;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/network/network.js?");

/***/ }),

/***/ "../smoke-node/public/bin/node.js":
/*!****************************************!*\
  !*** ../smoke-node/public/bin/node.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst system_1 = __webpack_require__(/*! ./system */ \"../smoke-node/public/bin/system/index.js\");\nconst hub_1 = __webpack_require__(/*! ./hub */ \"../smoke-node/public/bin/hub/index.js\");\nconst network_1 = __webpack_require__(/*! ./network */ \"../smoke-node/public/bin/network/index.js\");\nconst sockets_1 = __webpack_require__(/*! ./sockets */ \"../smoke-node/public/bin/sockets/index.js\");\nconst rest_1 = __webpack_require__(/*! ./rest */ \"../smoke-node/public/bin/rest/index.js\");\nconst media_1 = __webpack_require__(/*! ./media */ \"../smoke-node/public/bin/media/index.js\");\nnew hub_1.PageHubServer({}).listen(0);\n/**\n * A peer to peer networking node that runs inside the browser. Instances of\n * this type form the primary API for smoke. It includes networking and storage\n * APIs that enable for the creation of rich data driven services over WebRTC.\n */\nclass Node {\n    /** Creates a new Smoke node with the given options. */\n    constructor(options) {\n        this.options = options;\n        options = options || {};\n        this.hub = options.hub || new hub_1.PageHub(0);\n        this.network = new network_1.Network(this.hub);\n        this.system = new system_1.System(this.network);\n        this.sockets = new sockets_1.Sockets(this.network);\n        this.rest = new rest_1.Rest(this.sockets);\n        this.media = new media_1.Media();\n    }\n    /**\n     * Returns the network address of this node. This address is given to the\n     * node by way of the hub this node is connected to. To assign a hostname\n     * for this node, use the hub api.\n     */\n    address() {\n        return this.hub.address();\n    }\n    /**\n     * Disposes of this node along with its connection to the network.\n     */\n    async dispose() {\n        await this.rest.dispose();\n        await this.sockets.dispose();\n        await this.network.dispose();\n    }\n}\nexports.Node = Node;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/node.js?");

/***/ }),

/***/ "../smoke-node/public/bin/path/index.js":
/*!**********************************************!*\
  !*** ../smoke-node/public/bin/path/index.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nCopyright Joyent, Inc. and other Node contributors. (derived work)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar path_1 = __webpack_require__(/*! ./path */ \"../smoke-node/public/bin/path/path.js\");\nexports.Path = path_1.Path;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/path/index.js?");

/***/ }),

/***/ "../smoke-node/public/bin/path/path.js":
/*!*********************************************!*\
  !*** ../smoke-node/public/bin/path/path.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nCopyright Joyent, Inc. and other Node contributors. (derived work)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Provides nodejs path resolution services. This class was lifted from nodejs\n * to allow for path resolution primarily on smokes file system. Can be used\n * for general pathing.\n */\nclass Path {\n    /** Returns the basename of the given path. */\n    static basename(path, ext) {\n        var f = this.posixSplitPath(path)[2];\n        if (ext && f.substr(-1 * ext.length) === ext) {\n            f = f.substr(0, f.length - ext.length);\n        }\n        return f;\n    }\n    /** Returns the directory path of the given path. */\n    static dirname(path) {\n        const result = this.posixSplitPath(path);\n        const root = result[0];\n        let dir = result[1];\n        if (!root && !dir) {\n            return '.';\n        }\n        if (dir) {\n            dir = dir.substr(0, dir.length - 1);\n        }\n        return root + dir;\n    }\n    /** Returns the file extension of the the given path. */\n    static extname(path) {\n        return this.posixSplitPath(path)[3];\n    }\n    /** Formats the given PathObject into a path string. */\n    static format(pathObject) {\n        if (typeof pathObject !== 'object') {\n            throw new TypeError(`Parameter 'pathObject' must be an object, not ${typeof pathObject}`);\n        }\n        const root = pathObject.root || '';\n        if (typeof root !== 'string') {\n            throw new TypeError(`'pathObject.root' must be a string or undefined, not ${typeof pathObject.root}`);\n        }\n        const dir = pathObject.dir ? pathObject.dir + this.sep : '';\n        const base = pathObject.base || '';\n        return dir + base;\n    }\n    /** Tests if the given path is absolute. */\n    static isAbsolute(path) {\n        return path.charAt(0) === '/';\n    }\n    /** Joins the given path parameters. */\n    static join(...paths) {\n        let path = '';\n        for (let i = 0; i < paths.length; i++) {\n            const segment = paths[i];\n            if (typeof segment !== 'string') {\n                throw new TypeError('Arguments to path.join must be strings');\n            }\n            if (segment) {\n                if (!path) {\n                    path += segment;\n                }\n                else {\n                    path += '/' + segment;\n                }\n            }\n        }\n        return this.normalize(path);\n    }\n    /** Normalizes the given path. */\n    static normalize(path) {\n        const isAbsolute = this.isAbsolute(path);\n        const trailingSlash = path && path[path.length - 1] === '/';\n        path = this.normalizeArray(path.split('/'), !isAbsolute).join('/');\n        if (!path && !isAbsolute) {\n            path = '.';\n        }\n        if (path && trailingSlash) {\n            path += '/';\n        }\n        return (isAbsolute ? '/' : '') + path;\n    }\n    /** Parses the given path into a PathObject. */\n    static parse(path) {\n        if (typeof path !== 'string') {\n            throw new TypeError(`Parameter 'pathString' must be a string, not ${typeof path}`);\n        }\n        let parts = this.posixSplitPath(path);\n        if (!parts || parts.length !== 4) {\n            throw new TypeError(`Invalid path '${path}'`);\n        }\n        parts[1] = parts[1] || '';\n        parts[2] = parts[2] || '';\n        parts[3] = parts[3] || '';\n        return {\n            root: parts[0],\n            dir: parts[0] + parts[1].slice(0, -1),\n            base: parts[2],\n            ext: parts[3],\n            name: parts[2].slice(0, parts[2].length - parts[3].length)\n        };\n    }\n    /** Solves the relative path for the given 'from' and 'to' paths. */\n    static relative(from, to) {\n        from = this.resolve(from).substr(1);\n        to = this.resolve(to).substr(1);\n        const fromParts = this.trimArray(from.split('/'));\n        const toParts = this.trimArray(to.split('/'));\n        const length = Math.min(fromParts.length, toParts.length);\n        let samePartsLength = length;\n        for (let i = 0; i < length; i++) {\n            if (fromParts[i] !== toParts[i]) {\n                samePartsLength = i;\n                break;\n            }\n        }\n        let outputParts = [];\n        for (let i = samePartsLength; i < fromParts.length; i++) {\n            outputParts.push('..');\n        }\n        outputParts = outputParts.concat(toParts.slice(samePartsLength));\n        return outputParts.join('/');\n    }\n    /** Resolves the given paths. */\n    static resolve(...paths) {\n        let resolvedPath = '';\n        let resolvedAbsolute = false;\n        for (let i = paths.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n            let path = i >= 0 ? paths[i] : this.cwd;\n            // Skip empty and invalid entries\n            if (typeof path !== 'string') {\n                throw new TypeError('Arguments to path.resolve must be strings');\n            }\n            else if (!path) {\n                continue;\n            }\n            resolvedPath = path + '/' + resolvedPath;\n            resolvedAbsolute = path[0] === '/';\n        }\n        // At this point the path should be resolved to a full absolute path, but\n        // handle relative paths to be safe (might happen when process.cwd() fails)\n        // Normalize the path\n        resolvedPath = this.normalizeArray(resolvedPath.split('/'), !resolvedAbsolute).join('/');\n        return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';\n    }\n    // #region utility\n    /** Splits the given path. */\n    static posixSplitPath(path) {\n        return this.splitPathPattern.exec(path).slice(1);\n    }\n    // resolves . and .. elements in a path array with directory names there\n    // must be no slashes or device names (c:\\) in the array\n    // (so also no leading and trailing slashes - it does not distinguish\n    // relative and absolute paths)\n    static normalizeArray(parts, allowAboveRoot) {\n        const res = [];\n        for (let i = 0; i < parts.length; i++) {\n            const p = parts[i];\n            if (!p || p === '.') {\n                continue;\n            }\n            if (p === '..') {\n                if (res.length && res[res.length - 1] !== '..') {\n                    res.pop();\n                }\n                else if (allowAboveRoot) {\n                    res.push('..');\n                }\n            }\n            else {\n                res.push(p);\n            }\n        }\n        return res;\n    }\n    // returns an array with empty elements removed from either end of the input\n    // array or the original array if no elements need to be removed\n    static trimArray(array) {\n        const lastIndex = array.length - 1;\n        let start = 0;\n        for (; start <= lastIndex; start++) {\n            if (array[start])\n                break;\n        }\n        let end = lastIndex;\n        for (; end >= 0; end--) {\n            if (array[end])\n                break;\n        }\n        if (start === 0 && end === lastIndex) {\n            return array;\n        }\n        if (start > end) {\n            return [];\n        }\n        return array.slice(start, end + 1);\n    }\n}\nPath.splitPathPattern = /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\n// #region node path API\n/** file path seperator. */\nPath.sep = '/';\n/** file path delimitor. */\nPath.delimiter = ':';\n/** The current working directory. */\nPath.cwd = '/';\nexports.Path = Path;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/path/path.js?");

/***/ }),

/***/ "../smoke-node/public/bin/queryable/index.js":
/*!***************************************************!*\
  !*** ../smoke-node/public/bin/queryable/index.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar queryable_1 = __webpack_require__(/*! ./queryable */ \"../smoke-node/public/bin/queryable/queryable.js\");\nexports.Queryable = queryable_1.Queryable;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/queryable/index.js?");

/***/ }),

/***/ "../smoke-node/public/bin/queryable/queryable.js":
/*!*******************************************************!*\
  !*** ../smoke-node/public/bin/queryable/queryable.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Provides an asynchronous query interface over AsyncIterable<T>. This class\n * is modelled on C#'s Queryable<T> type allowing expressions to be built and\n * evaluated either via enumeration, or via eager collection.\n */\nclass Queryable {\n    constructor(iterable) {\n        this.iterable = iterable;\n    }\n    [Symbol.asyncIterator]() {\n        async function* generator(iterable) {\n            for await (const element of iterable) {\n                yield element;\n            }\n        }\n        return generator(this.iterable);\n    }\n    // #region lazy evaluators\n    /**  Concatenates two query sequences returning a new query that enumerates the first, then the second. */\n    concat(queryable) {\n        async function* generator(iterable) {\n            for await (const element of iterable) {\n                yield element;\n            }\n            for await (const element of queryable.iterable) {\n                yield element;\n            }\n        }\n        return new Queryable(generator(this.iterable));\n    }\n    /** Returns distinct elements from a sequence by using the default equality comparer to compare values.  */\n    distinct(func) {\n        func = func || ((value) => value);\n        const accu = [];\n        async function* generator(iterable) {\n            for await (const element of iterable) {\n                const key = func(element);\n                if (accu.indexOf(key) === -1) {\n                    accu.push(key);\n                    yield element;\n                }\n            }\n        }\n        return new Queryable(generator(this.iterable));\n    }\n    /** Returns the element at the specified index, if no element exists, reject. */\n    async elementAt(index) {\n        const array = await this.toArray();\n        return array[index];\n    }\n    /** Returns the first element. if no element exists, reject. */\n    async first() {\n        const array = await this.toArray();\n        return array[0];\n    }\n    /** Returns the last element in this sequence. if empty, reject. */\n    async last() {\n        const array = await this.toArray();\n        return array[array.length - 1];\n    }\n    /** (internal) provides ordering for the orderBy() and orderByDescending() operators. */\n    ordering(direction, func) {\n        async function* generator(iterable) {\n            const array = [];\n            for await (const element of iterable) {\n                array.push(element);\n            }\n            const sorted = array.sort((a, b) => {\n                const left = func(a);\n                const right = func(b);\n                return (direction === \"asc\")\n                    ? +(left > right) || +(left === right) - 1\n                    : +(left < right) || +(left === right) - 1;\n            });\n            for (const element of sorted) {\n                yield element;\n            }\n        }\n        return new Queryable(generator(this.iterable));\n    }\n    /** Sorts the elements of a sequence in ascending order according to a key. This method requires an internal collect(). */\n    orderBy(func) {\n        return this.ordering(\"asc\", func);\n    }\n    /** Sorts the elements of a sequence in descending order according to a key. This method requires an internal collect(). */\n    orderByDescending(func) {\n        return this.ordering(\"desc\", func);\n    }\n    /** Inverts the order of the elements in a sequence. This method requires an internal collect. */\n    reverse() {\n        async function* generator(iterable) {\n            const array = [];\n            for await (const element of iterable) {\n                array.push(element);\n            }\n            for (let i = array.length - 1; i !== 0; i--) {\n                yield array[i];\n            }\n        }\n        return new Queryable(generator(this.iterable));\n    }\n    /** Projects each element of a sequence into a new form. */\n    select(func) {\n        async function* generator(iterable) {\n            let index = 0;\n            for await (const element of iterable) {\n                yield func(element, index++);\n            }\n        }\n        return new Queryable(generator(this.iterable));\n    }\n    /** Projects each element of a sequence to an IEnumerable<T> and combines the resulting sequences into one sequence. */\n    selectMany(func) {\n        async function* generator(iterable) {\n            let index = 0;\n            for await (const element0 of iterable) {\n                for await (const element1 of func(element0, index++)) {\n                    yield element1;\n                }\n            }\n        }\n        return new Queryable(generator(this.iterable));\n    }\n    /** Bypasses a specified number of elements in a sequence and then returns the remaining elements. */\n    skip(count) {\n        async function* generator(iterable) {\n            let index = 0;\n            for await (const element of iterable) {\n                if (index >= count) {\n                    yield element;\n                }\n                index += 1;\n            }\n        }\n        return new Queryable(generator(this.iterable));\n    }\n    /** Returns a specified number of contiguous elements from the start of a sequence. */\n    take(count) {\n        async function* generator(iterable) {\n            let index = 0;\n            for await (const element of iterable) {\n                if (index < count) {\n                    yield element;\n                }\n                index += 1;\n            }\n        }\n        return new Queryable(generator(this.iterable));\n    }\n    /** Filters a sequence of values based on a predicate. */\n    where(func) {\n        async function* generator(iterable) {\n            let index = 0;\n            for await (const element of iterable) {\n                if (func(element, index++)) {\n                    yield element;\n                }\n            }\n        }\n        return new Queryable(generator(this.iterable));\n    }\n    // #region eager aggregators\n    /** Applies an accumulator function over a sequence. */\n    async aggregate(func, initial) {\n        const array = await this.toArray();\n        return array.reduce(func, initial);\n    }\n    /** Determines whether all the elements of a sequence satisfy a condition. */\n    async all(func) {\n        const array = await this.toArray();\n        return array.every(func);\n    }\n    /** Computes the average of a sequence of numeric values. */\n    async average(func) {\n        const array = await this.toArray();\n        const sum = array.map(func).reduce((acc, c) => acc + c, 0);\n        return sum / array.length;\n    }\n    /** Determines whether a sequence contains any elements that meet this criteria. */\n    async any(func) {\n        const array = await this.toArray();\n        return array.some(func);\n    }\n    /**\n     * Returns the number of elements in a sequence. Note, this function\n     * enumerates all elements for this queryable. For the fast path, use\n     * the .count() function on the `Database` type.\n     */\n    async count() {\n        let count = 0;\n        for await (const value of this.iterable) {\n            count += 1;\n        }\n        return count;\n    }\n    /** Computes the sum of the sequence of numeric values. */\n    async sum(func) {\n        const array = await this.toArray();\n        return array.reduce((acc, c, index) => acc + func(c, index), 0);\n    }\n    /** Returns this queryable as an array. */\n    async toArray() {\n        const buffer = [];\n        for await (const element of this.iterable) {\n            buffer.push(element);\n        }\n        return buffer;\n    }\n}\nexports.Queryable = Queryable;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/queryable/queryable.js?");

/***/ }),

/***/ "../smoke-node/public/bin/querystring/index.js":
/*!*****************************************************!*\
  !*** ../smoke-node/public/bin/querystring/index.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar querystring_1 = __webpack_require__(/*! ./querystring */ \"../smoke-node/public/bin/querystring/querystring.js\");\nexports.QueryString = querystring_1.QueryString;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/querystring/index.js?");

/***/ }),

/***/ "../smoke-node/public/bin/querystring/querystring.js":
/*!***********************************************************!*\
  !*** ../smoke-node/public/bin/querystring/querystring.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Parses query string parameters from Uniform Resource Locator strings.\n */\nclass QueryString {\n    // Parses query segments from the given string. A segment\n    // is denoted as <path>?[a=10&b=20]?[c=10&d]#?e where the\n    // path is ignored and hashes terminate.\n    static parseQuerySegments(s) {\n        const markers = [];\n        for (let i = 0; i < s.length; i++) {\n            const next = s.charAt(i);\n            if (next === '#') {\n                break;\n            }\n            if (next === '?') {\n                markers.push(i);\n            }\n        }\n        const segments = [];\n        for (let i = 0; i < markers.length; i++) {\n            segments.push(s.slice(markers[i] + 1, markers[i + 1]));\n        }\n        return segments;\n    }\n    // Parses a segment and returns an array of KeyValue pairs.\n    // The 'key' is mandatory but the 'value' may be undefined.\n    // This function maps undefined into empty strings.\n    static parsePairs(segment) {\n        return segment\n            .split('&')\n            .map(assign => assign.split('='))\n            .filter(pair => pair[0] !== '')\n            .map(pair => {\n            const key = pair[0];\n            const value = pair[1] || '';\n            return [key, value];\n        });\n    }\n    // Builds an expanded QueryStringResult. This result includes\n    // all values found for a given property buffered in a string\n    // array. This is to be later collapsed into a reduced form.\n    // using various rules.\n    static expandResult(pairs) {\n        const result = {};\n        for (const [key, value] of pairs) {\n            if (result[key] === undefined) {\n                result[key] = [];\n            }\n            result[key] = [...result[key], value];\n        }\n        return result;\n    }\n    // Collapses an expaned QueryStringResult. This function will filter each\n    // keys values as distinct, then collapse the values down to a 'string'\n    // if the distinct array has only 1 element.\n    static collapseResult(result) {\n        for (const key of Object.keys(result)) {\n            let array = result[key];\n            array = array.filter((value, index, result) => result.indexOf(value) === index);\n            if (array.length > 1) {\n                array = array.filter(value => value.length > 0);\n            }\n            if (array.length === 1) {\n                result[key] = array[0];\n            }\n            else {\n                result[key] = array;\n            }\n        }\n        return result;\n    }\n    /** Parses the given url for its query paramters. */\n    static parse(url) {\n        const queries = this.parseQuerySegments(url);\n        const pairs = queries\n            .map(seg => this.parsePairs(seg))\n            .flatMap(pair => pair);\n        const expanded = this.expandResult(pairs);\n        return this.collapseResult(expanded);\n    }\n}\nexports.QueryString = QueryString;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/querystring/querystring.js?");

/***/ }),

/***/ "../smoke-node/public/bin/rest/fetch/fetch.js":
/*!****************************************************!*\
  !*** ../smoke-node/public/bin/rest/fetch/fetch.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst url_1 = __webpack_require__(/*! ../../url */ \"../smoke-node/public/bin/url/index.js\");\nconst buffer_1 = __webpack_require__(/*! ../../buffer */ \"../smoke-node/public/bin/buffer/index.js\");\nconst streams_1 = __webpack_require__(/*! ../../streams */ \"../smoke-node/public/bin/streams/index.js\");\nconst sockets_1 = __webpack_require__(/*! ../../sockets */ \"../smoke-node/public/bin/sockets/index.js\");\nconst request_1 = __webpack_require__(/*! ./request */ \"../smoke-node/public/bin/rest/fetch/request.js\");\nconst response_1 = __webpack_require__(/*! ./response */ \"../smoke-node/public/bin/rest/fetch/response.js\");\nclass FetchUrlError extends Error {\n    constructor(message) {\n        super(message);\n    }\n}\nexports.FetchUrlError = FetchUrlError;\nclass FetchReadError extends Error {\n    constructor(expected, actual) {\n        super(`Cannot read a '${expected}' from a '${actual}' response.`);\n    }\n}\nexports.FetchReadError = FetchReadError;\n/**\n * A REST fetch API that allows callers to retrieve resources hosted on remote\n * REST servers running within a peer network. Provides similar functionality\n * to the standard browser fetch API with the added ability to map readable\n * queryable and mediastreams responses.\n */\nclass Fetch {\n    constructor(sockets) {\n        this.sockets = sockets;\n    }\n    /** Creates a readable from the given buffer. */\n    createReadable(buffer) {\n        const queue = (buffer.length > 0) ? [buffer] : [];\n        return new streams_1.Readable({\n            pull: (controller) => {\n                if (queue.length > 0) {\n                    const next = queue.shift();\n                    controller.enqueue(next);\n                }\n                else {\n                    controller.close();\n                }\n            }\n        });\n    }\n    /** Resolves a readable stream from body. */\n    resolveBodyAsReadable(body) {\n        if (body === undefined) {\n            return this.createReadable(buffer_1.Buffer.alloc(0));\n        }\n        else if (body instanceof streams_1.Readable) {\n            return body;\n        }\n        else if (body instanceof Uint8Array) { // matches: Buffer\n            return this.createReadable(body);\n        }\n        else if (body instanceof ArrayBuffer) {\n            return this.createReadable(buffer_1.Buffer.from(body));\n        }\n        else if (typeof body === 'string') {\n            return this.createReadable(buffer_1.Buffer.from(body));\n        }\n        else {\n            const json = JSON.stringify(body);\n            return this.createReadable(buffer_1.Buffer.from(json));\n        }\n    }\n    /** Opens a socket to the remote host. */\n    async connect(host, port) {\n        return new Promise((resolve, reject) => {\n            const socket = this.sockets.connect(host, port);\n            socket.once('error', error => reject(error));\n            socket.once('close', () => reject(new Error('Fetch socket closed unexpectedly.')));\n            socket.once('open', () => resolve(socket));\n        });\n    }\n    /**\n     * Creates a fetch request to a remote Rest server and returns a FetchResponse.\n     * @param endpoint The 'rest://<address>:<port>` endpoint. If no port is given,\n     * port 80 is used. If fetching resources from localhost, you can pass the root\n     * relative path.\n     * @param options The method, header and body options for this request. If undefined\n     * the request method will be GET.\n     */\n    async fetch(endpoint, options) {\n        options = options || {};\n        options.method = options.method || 'get';\n        options.headers = options.headers || {};\n        const result = url_1.Url.parse(endpoint);\n        if (result.protocol && result.protocol !== 'rest:') {\n            throw new FetchUrlError(`Can only fetch with 'rest:// protocols.'`);\n        }\n        if (result.path === null) {\n            throw new FetchUrlError(`The fetch URL '${result.path}' is invalid.`);\n        }\n        const url = result.path;\n        const host = result.host || 'localhost';\n        const port = result.port || '80';\n        const method = options.method || 'get';\n        const headers = options.headers || {};\n        const body = this.resolveBodyAsReadable(options.body);\n        const stream = new sockets_1.NetworkStream(await this.connect(host, port));\n        const request = new request_1.FetchRequest(stream, { url, method, headers }, body);\n        const response = await request.getResponse();\n        return new response_1.FetchResponse(stream, response);\n    }\n}\nexports.Fetch = Fetch;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/rest/fetch/fetch.js?");

/***/ }),

/***/ "../smoke-node/public/bin/rest/fetch/index.js":
/*!****************************************************!*\
  !*** ../smoke-node/public/bin/rest/fetch/index.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar request_1 = __webpack_require__(/*! ./request */ \"../smoke-node/public/bin/rest/fetch/request.js\");\nexports.FetchRequest = request_1.FetchRequest;\nvar response_1 = __webpack_require__(/*! ./response */ \"../smoke-node/public/bin/rest/fetch/response.js\");\nexports.FetchResponse = response_1.FetchResponse;\nvar fetch_1 = __webpack_require__(/*! ./fetch */ \"../smoke-node/public/bin/rest/fetch/fetch.js\");\nexports.Fetch = fetch_1.Fetch;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/rest/fetch/index.js?");

/***/ }),

/***/ "../smoke-node/public/bin/rest/fetch/request.js":
/*!******************************************************!*\
  !*** ../smoke-node/public/bin/rest/fetch/request.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst protocol_1 = __webpack_require__(/*! ../protocol */ \"../smoke-node/public/bin/rest/protocol/index.js\");\n/**\n * The Fetch request type.\n */\nclass FetchRequest {\n    constructor(stream, header, body) {\n        this.stream = stream;\n        this.header = header;\n        this.body = body;\n    }\n    async getResponse() {\n        await protocol_1.HeaderProtocol.writeRequestHeader(this.stream, this.header);\n        protocol_1.BodyProtocol.writeReadable(this.stream, this.body, { ignoreError: true });\n        return protocol_1.HeaderProtocol.readResponseHeader(this.stream);\n    }\n}\nexports.FetchRequest = FetchRequest;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/rest/fetch/request.js?");

/***/ }),

/***/ "../smoke-node/public/bin/rest/fetch/response.js":
/*!*******************************************************!*\
  !*** ../smoke-node/public/bin/rest/fetch/response.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst buffer_1 = __webpack_require__(/*! ../../buffer */ \"../smoke-node/public/bin/buffer/index.js\");\nconst protocol_1 = __webpack_require__(/*! ../protocol */ \"../smoke-node/public/bin/rest/protocol/index.js\");\n/**\n * The Fetch response type.\n */\nclass FetchResponse {\n    constructor(stream, response) {\n        this.stream = stream;\n        this.response = response;\n        this.headers = this.response.headers;\n        this.status = this.response.status;\n    }\n    /** Reads the body of this response as a readable. */\n    readable() {\n        return protocol_1.BodyProtocol.readReadable(this.stream);\n    }\n    /** Reads the body of this response as a queryable. */\n    query() {\n        return protocol_1.BodyProtocol.readQueryable(this.stream);\n    }\n    /** Reads the body of this response as a mediastream. */\n    mediastream() {\n        return protocol_1.BodyProtocol.readMediaStream(this.stream);\n    }\n    /** Reads the body of this response as a buffer. */\n    async buffer() {\n        const buffers = [];\n        for await (const buffer of this.readable()) {\n            buffers.push(buffer);\n        }\n        return buffer_1.Buffer.concat(buffers);\n    }\n    /** Reads the body of this response as a string. */\n    async text(encoding) {\n        const buffer = await this.buffer();\n        return buffer.toString(encoding);\n    }\n    /** Reads the body of this response as a JSON object. */\n    async json() {\n        const buffer = await this.buffer();\n        return JSON.parse(buffer.toString('utf-8'));\n    }\n}\nexports.FetchResponse = FetchResponse;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/rest/fetch/response.js?");

/***/ }),

/***/ "../smoke-node/public/bin/rest/index.js":
/*!**********************************************!*\
  !*** ../smoke-node/public/bin/rest/index.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar rest_1 = __webpack_require__(/*! ./rest */ \"../smoke-node/public/bin/rest/rest.js\");\nexports.Rest = rest_1.Rest;\nvar fetch_1 = __webpack_require__(/*! ./fetch */ \"../smoke-node/public/bin/rest/fetch/index.js\");\nexports.Fetch = fetch_1.Fetch;\nexports.FetchRequest = fetch_1.FetchRequest;\nexports.FetchResponse = fetch_1.FetchResponse;\nvar server_1 = __webpack_require__(/*! ./server */ \"../smoke-node/public/bin/rest/server/index.js\");\nexports.Router = server_1.Router;\nexports.Route = server_1.Route;\nvar server_2 = __webpack_require__(/*! ./server */ \"../smoke-node/public/bin/rest/server/index.js\");\nexports.RestServer = server_2.RestServer;\nexports.RestRequest = server_2.RestRequest;\nexports.RestResponse = server_2.RestResponse;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/rest/index.js?");

/***/ }),

/***/ "../smoke-node/public/bin/rest/protocol/body.js":
/*!******************************************************!*\
  !*** ../smoke-node/public/bin/rest/protocol/body.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst queryable_1 = __webpack_require__(/*! ../../queryable */ \"../smoke-node/public/bin/queryable/index.js\");\nconst streams_1 = __webpack_require__(/*! ../../streams */ \"../smoke-node/public/bin/streams/index.js\");\nconst buffer_1 = __webpack_require__(/*! ../../buffer */ \"../smoke-node/public/bin/buffer/index.js\");\nconst SEND_CHUNK_SIZE = 65536; // 64k\n/**\n * The REST body protocol. Provides request body read / write between client\n * and server. Also supports the transmission of mediastreams.\n */\nclass BodyProtocol {\n    // #region readable\n    /** Segments the given buffers with the given size. */\n    static partition(buffers, size) {\n        const buffer = buffer_1.Buffer.concat(buffers);\n        const segments = [];\n        let offset = 0;\n        while (true) {\n            const slice = buffer.slice(offset, offset + size);\n            offset += slice.length;\n            if (slice.length > 0) {\n                segments.push(slice);\n                continue;\n            }\n            break;\n        }\n        return segments;\n    }\n    /**\n     * Transmits the given readable to the writable. Will signal EOF as a zero\n     * length buffer. This function will partition the buffers received from the\n     * given readable into buffer slices manageable for the underlying transport.\n     */\n    static async writeReadable(stream, readable, options = { ignoreError: false }) {\n        try {\n            const empty = buffer_1.Buffer.alloc(0);\n            let store = empty;\n            for await (const buffer of readable) {\n                const buffers = this.partition([store, buffer], SEND_CHUNK_SIZE);\n                store = empty;\n                for (const buffer of buffers) {\n                    if (buffer.length === SEND_CHUNK_SIZE) {\n                        await stream.writable.write(buffer);\n                    }\n                    else {\n                        store = buffer;\n                    }\n                }\n            }\n            if (store.length > 0) {\n                await stream.writable.write(store);\n            }\n            await stream.writable.write(buffer_1.Buffer.alloc(0)); // EOF\n        }\n        catch (error) {\n            if (!options.ignoreError) {\n                throw error;\n            }\n        }\n    }\n    /**\n     * Reads from the network stream as a REST body. Continues to pull content\n     * from the network stream until EOF.\n     */\n    static readReadable(stream) {\n        return new streams_1.Readable({\n            pull: async (controller) => {\n                try {\n                    const next = await stream.readable.read();\n                    const buffer = next.value;\n                    const end = (buffer.length === 0);\n                    if (!end) {\n                        controller.enqueue(buffer);\n                    }\n                    else {\n                        controller.close();\n                    }\n                }\n                catch (error) {\n                    controller.error(new Error('Unable to read from this stream.'));\n                }\n            }\n        });\n    }\n    // #region queryable\n    /**\n     * Transmits the given queryable on the response stream. This allows for the\n     * receiver to pull new values from the queryable via the NetworkStream\n     * protocol. The different between this and the writeReadable is that\n     * records are encoded as JSON buffers.\n     */\n    static async writeQueryable(stream, queryable, options = { ignoreError: false }) {\n        try {\n            for await (const record of queryable) {\n                const json = JSON.stringify(record);\n                const buffer = buffer_1.Buffer.from(json, 'utf-8');\n                await stream.writable.write(buffer);\n            }\n            await stream.writable.write(buffer_1.Buffer.alloc(0)); // EOF\n        }\n        catch (error) {\n            if (!options.ignoreError) {\n                throw error;\n            }\n        }\n    }\n    /**\n     * Reads the given queryable as a REST body. This function will wrap the given\n     * queryable and continue to emit values from it so long as the payload\n     * received is not zero length (signalling EOF).\n     */\n    static readQueryable(stream) {\n        async function* generator(stream) {\n            for await (const buffer of stream.readable) {\n                if (buffer.length === 0) {\n                    break;\n                }\n                const json = buffer.toString('utf-8');\n                const record = JSON.parse(json);\n                yield record;\n            }\n        }\n        return new queryable_1.Queryable(generator(stream));\n    }\n    // #region mediastream\n    /**\n     * Writes the given mediastream out as the body on this streams writable.\n     * This function will send a disposition header on the response stream\n     * followed by the tracks themselves. Receivers should check the disposition\n     * before attempting to wait on incoming tracks.\n     */\n    static async writeMediaStream(stream, mediastream, options = { ignoreError: false }) {\n        try {\n            // Send disposition descriptor on response then EOF. We could additionally\n            // forward the mediastream id on the body for the recipient to check. \n            // Consider this if issues are observed with concurrent mediastreams overlap\n            // from the same sender.\n            await stream.writable.write(buffer_1.Buffer.from('mediastream'));\n            // Send mediastreams through the socket directory. It may be worth looking\n            // at another mechanism for doing instead of having to pipe through the\n            // Socket interface.\n            for (const track of mediastream.getTracks()) {\n                await stream.socket.addTrack(track, mediastream);\n            }\n            // Send EOF, signalling the mediastream tracks (body) have been sent.\n            await stream.writable.write(buffer_1.Buffer.alloc(0)); // EOF\n        }\n        catch (error) {\n            if (!options.ignoreError) {\n                throw error;\n            }\n        }\n    }\n    /**\n     * Reads a mediastream as a response. This function will check the disposition\n     * prior to listening for incoming tracks. This check is to help the receiver\n     * learn if they are actually receiving the correct type.\n     */\n    static async readMediaStream(stream) {\n        function wait_for_stream(stream, timeout) {\n            return new Promise((resolve, reject) => {\n                setTimeout(() => reject(new Error('MediaStream receive timeout.')), timeout);\n                stream.socket.once('track', track => resolve(track.streams[0]));\n            });\n        }\n        async function read_disposition() {\n            const { value: disposition } = await stream.readable.read();\n            const { value: eof } = await stream.readable.read();\n            return [disposition, eof];\n        }\n        async function read_transmit() {\n            for await (const buffer of stream.readable) {\n                // Here, we only read the values from the senders MediaStreamContext,\n                // this iteration will continue until the remote sender has disposed\n                // of the context. \n            }\n        }\n        const [disposition, eof] = await read_disposition();\n        if (disposition.toString() !== 'mediastream' && eof.length !== 0) {\n            throw Error('Unable to read mediastream. Sender sent invalid data.');\n        }\n        const mediastream = await wait_for_stream(stream, 4000);\n        read_transmit();\n        return mediastream;\n    }\n}\nexports.BodyProtocol = BodyProtocol;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/rest/protocol/body.js?");

/***/ }),

/***/ "../smoke-node/public/bin/rest/protocol/header.js":
/*!********************************************************!*\
  !*** ../smoke-node/public/bin/rest/protocol/header.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst buffer_1 = __webpack_require__(/*! ../../buffer */ \"../smoke-node/public/bin/buffer/index.js\");\nclass ResponseHeaderNotReceivedError extends Error {\n    constructor() {\n        super('Server closed without sending a header.');\n    }\n}\nexports.ResponseHeaderNotReceivedError = ResponseHeaderNotReceivedError;\nclass ResponseHeaderInvalidError extends Error {\n    constructor() {\n        super('Server sent an invalid request header.');\n    }\n}\nexports.ResponseHeaderInvalidError = ResponseHeaderInvalidError;\nclass RequestHeaderInvalidError extends Error {\n    constructor() {\n        super('Client sent an invalid request header.');\n    }\n}\nexports.RequestHeaderInvalidError = RequestHeaderInvalidError;\nclass HeaderProtocol {\n    /** Sends the client request header. */\n    static async writeRequestHeader(stream, header) {\n        await stream.writable.write(buffer_1.Buffer.from(JSON.stringify(header)));\n    }\n    /** Reads the client request header. */\n    static async readRequestHeader(stream) {\n        const read = await stream.readable.read();\n        if (read.done) {\n            throw new RequestHeaderInvalidError();\n        }\n        const header = JSON.parse(read.value.toString());\n        if (header.url === undefined || typeof header.url !== 'string') {\n            throw new RequestHeaderInvalidError();\n        }\n        if (header.method === undefined || typeof header.method !== 'string') {\n            throw new RequestHeaderInvalidError();\n        }\n        if (header.headers === undefined || typeof header.headers !== 'object') {\n            throw new RequestHeaderInvalidError();\n        }\n        // Wait for mediastream track to appear.\n        return header;\n    }\n    /** Sends the server response header. */\n    static async writeResponseHeader(stream, header) {\n        await stream.writable.write(buffer_1.Buffer.from(JSON.stringify(header)));\n    }\n    /** Reads the server response header. */\n    static async readResponseHeader(stream) {\n        const { done, value } = await stream.readable.read();\n        if (done) {\n            throw new ResponseHeaderNotReceivedError();\n        }\n        const header = JSON.parse(value.toString());\n        if (header.status === undefined) {\n            throw new ResponseHeaderInvalidError();\n        }\n        if (header.headers === undefined) {\n            throw new ResponseHeaderInvalidError();\n        }\n        return header;\n    }\n}\nexports.HeaderProtocol = HeaderProtocol;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/rest/protocol/header.js?");

/***/ }),

/***/ "../smoke-node/public/bin/rest/protocol/index.js":
/*!*******************************************************!*\
  !*** ../smoke-node/public/bin/rest/protocol/index.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar header_1 = __webpack_require__(/*! ./header */ \"../smoke-node/public/bin/rest/protocol/header.js\");\nexports.HeaderProtocol = header_1.HeaderProtocol;\nvar body_1 = __webpack_require__(/*! ./body */ \"../smoke-node/public/bin/rest/protocol/body.js\");\nexports.BodyProtocol = body_1.BodyProtocol;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/rest/protocol/index.js?");

/***/ }),

/***/ "../smoke-node/public/bin/rest/rest.js":
/*!*********************************************!*\
  !*** ../smoke-node/public/bin/rest/rest.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst server_1 = __webpack_require__(/*! ./server */ \"../smoke-node/public/bin/rest/server/index.js\");\nconst fetch_1 = __webpack_require__(/*! ./fetch */ \"../smoke-node/public/bin/rest/fetch/index.js\");\n/**\n * A HTTP emulation context. Allows one to create HTTP like web hosts and fetch\n * remote resources across a peer network using request response semantics.\n */\nclass Rest {\n    constructor(sockets) {\n        this.sockets = sockets;\n        this.servers = [];\n    }\n    /** Creates a new Rest server. */\n    createServer(options) {\n        const server = new server_1.RestServer(this.sockets, options);\n        this.servers.push(server);\n        return server;\n    }\n    /** Fetches a request from a remote host. */\n    async fetch(endpoint, options = { method: 'get', headers: {} }) {\n        return new fetch_1.Fetch(this.sockets).fetch(endpoint, options);\n    }\n    /** Disposes of this object. */\n    dispose() {\n        while (this.servers.length > 0) {\n            const server = this.servers.shift();\n            server.dispose();\n        }\n    }\n}\nexports.Rest = Rest;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/rest/rest.js?");

/***/ }),

/***/ "../smoke-node/public/bin/rest/server/index.js":
/*!*****************************************************!*\
  !*** ../smoke-node/public/bin/rest/server/index.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar router_1 = __webpack_require__(/*! ./router */ \"../smoke-node/public/bin/rest/server/router.js\");\nexports.Router = router_1.Router;\nexports.Route = router_1.Route;\nvar request_1 = __webpack_require__(/*! ./request */ \"../smoke-node/public/bin/rest/server/request.js\");\nexports.RestRequest = request_1.RestRequest;\nvar response_1 = __webpack_require__(/*! ./response */ \"../smoke-node/public/bin/rest/server/response.js\");\nexports.RestResponse = response_1.RestResponse;\nvar server_1 = __webpack_require__(/*! ./server */ \"../smoke-node/public/bin/rest/server/server.js\");\nexports.RestServer = server_1.RestServer;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/rest/server/index.js?");

/***/ }),

/***/ "../smoke-node/public/bin/rest/server/middleware.js":
/*!**********************************************************!*\
  !*** ../smoke-node/public/bin/rest/server/middleware.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/** Resolves middleware functions as interfaced middleware objects. */\nfunction asMiddleware(middleware) {\n    if (typeof middleware === 'function') {\n        const handle = middleware;\n        return { handle };\n    }\n    else {\n        return middleware;\n    }\n}\nexports.asMiddleware = asMiddleware;\n/** Common function for executing a middleware stack. Excepts a cloned stack on each invocation. */\nfunction runStack(stack, request, response, next) {\n    return (stack.length > 0)\n        ? stack.shift().handle(request, response, () => runStack(stack, request, response, next))\n        : next();\n}\nexports.runStack = runStack;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/rest/server/middleware.js?");

/***/ }),

/***/ "../smoke-node/public/bin/rest/server/pattern.js":
/*!*******************************************************!*\
  !*** ../smoke-node/public/bin/rest/server/pattern.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass Pattern {\n    /** Creates a pattern matcher object. */\n    constructor(pattern) {\n        this.pattern = pattern;\n        this.results = Pattern.parsePattern(this.pattern);\n        this.regex = Pattern.buildRegex(this.results);\n        this.params = Pattern.buildParams(this.results);\n    }\n    /** Matches for the given url. If match returns Params otherwise undefined.  */\n    match(url) {\n        const match = url.match(this.regex);\n        if (match) {\n            return this.params.reduce((acc, param, index) => {\n                acc[param] = match[index + 1];\n                return acc;\n            }, {});\n        }\n        return undefined;\n    }\n    /** Parses the pattern, resolving an array of parse tokens used to build params regex expressions. */\n    static parsePattern(pattern) {\n        const characters = pattern.split('');\n        const results = [];\n        let mode = 'literal';\n        let buffer = [];\n        while (characters.length > 0) {\n            const current = characters.shift();\n            if (current === '?' || current === '&') {\n                throw Error(`Illegal character '${current}' in pattern '${pattern}'`);\n            }\n            if (mode === 'literal' && current !== ':') {\n                buffer.push(current);\n                continue;\n            }\n            if (current === ':') {\n                const type = 'literal';\n                const value = buffer.join('');\n                results.push({ type, value });\n                mode = 'param';\n                buffer = [];\n                continue;\n            }\n            if (mode === 'param' && (current === '/' || current === '-')) {\n                const type = 'param';\n                const value = buffer.join('');\n                results.push({ type, value });\n                mode = 'literal';\n                buffer = [];\n                buffer.push(current);\n                continue;\n            }\n            buffer.push(current);\n        }\n        if (buffer.length > 0) {\n            const type = mode;\n            const value = buffer.join('');\n            results.push({ type, value });\n        }\n        return results;\n    }\n    /** Builds the patterns regular expression from parser results. */\n    static buildRegex(results) {\n        const expr = results\n            .map(result => (result.type === 'param' ? '([\\\\w-_$]*)' : result.value))\n            .join('');\n        return new RegExp(`^${expr}$`);\n    }\n    /** Builds the patterns param names from parser results. */\n    static buildParams(results) {\n        return results\n            .filter(result => result.type === 'param')\n            .map(result => result.value);\n    }\n}\nexports.Pattern = Pattern;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/rest/server/pattern.js?");

/***/ }),

/***/ "../smoke-node/public/bin/rest/server/request.js":
/*!*******************************************************!*\
  !*** ../smoke-node/public/bin/rest/server/request.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst buffer_1 = __webpack_require__(/*! ../../buffer */ \"../smoke-node/public/bin/buffer/index.js\");\nconst protocol_1 = __webpack_require__(/*! ../protocol */ \"../smoke-node/public/bin/rest/protocol/index.js\");\nclass InvalidRequestError extends Error {\n    constructor(message) {\n        super(message);\n    }\n}\nexports.InvalidRequestError = InvalidRequestError;\nclass ReadRequestError extends Error {\n    constructor(message) {\n        super(message);\n    }\n}\nexports.ReadRequestError = ReadRequestError;\n/**\n * The REST server request type.\n */\nclass RestRequest {\n    constructor(stream, header) {\n        this.stream = stream;\n        this.header = header;\n        this.local = this.stream.socket.local;\n        this.remote = this.stream.socket.remote;\n        this.url = header.url;\n        this.headers = header.headers;\n        this.method = header.method;\n        this.path = '';\n        this.query = {};\n        this.params = {};\n    }\n    /** Reads the body of this request as a readable stream. */\n    readable() {\n        return protocol_1.BodyProtocol.readReadable(this.stream);\n    }\n    /** Reads the body of this request as a buffer. */\n    async buffer() {\n        const buffers = [];\n        for await (const buffer of this.readable()) {\n            buffers.push(buffer);\n        }\n        return buffer_1.Buffer.concat(buffers);\n    }\n    /** Reads the body of this request as text. */\n    async text(encoding) {\n        const buffer = await this.buffer();\n        return buffer.toString(encoding);\n    }\n    /** Reads the body of this request as a JSON object. */\n    async json() {\n        const buffer = await this.buffer();\n        return JSON.parse(buffer.toString('utf-8'));\n    }\n}\nexports.RestRequest = RestRequest;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/rest/server/request.js?");

/***/ }),

/***/ "../smoke-node/public/bin/rest/server/response.js":
/*!********************************************************!*\
  !*** ../smoke-node/public/bin/rest/server/response.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst buffer_1 = __webpack_require__(/*! ../../buffer */ \"../smoke-node/public/bin/buffer/index.js\");\nconst streams_1 = __webpack_require__(/*! ../../streams */ \"../smoke-node/public/bin/streams/index.js\");\nconst protocol_1 = __webpack_require__(/*! ../protocol */ \"../smoke-node/public/bin/rest/protocol/index.js\");\n/**\n * A MediaStream context type given as a handle when sending mediastreams as\n * responses. It handles pulsing the messages down the receiver which keeps\n * the mediastream pipe open. Callers can call the dispose() method to terminate\n * outbound streams.\n */\nclass MediaStreamContext {\n    constructor(stream) {\n        this.stream = stream;\n        this.streaming = true;\n        this.transmit();\n    }\n    /** Disposes of this mediastream. */\n    dispose() {\n        this.streaming = false;\n    }\n    async delay(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n    async transmit() {\n        while (this.streaming) {\n            await this.stream.writable.write(buffer_1.Buffer.from([1]));\n            await this.delay(100);\n        }\n        await this.stream.writable.close();\n    }\n}\nexports.MediaStreamContext = MediaStreamContext;\nclass ResponseAlreadySentError extends Error {\n    constructor() {\n        super('Responses can only be sent once.');\n    }\n}\nexports.ResponseAlreadySentError = ResponseAlreadySentError;\n/**\n * The REST server response type.\n */\nclass RestResponse {\n    constructor(stream) {\n        this.stream = stream;\n        /** The headers sent with this request. */\n        this.headers = {};\n        /** The status code. Use standard HTTP status code. */\n        this.status = 200;\n        this.sent = false;\n    }\n    /**\n     * Transmits a mediastream on the response. This function returns a context\n     * object which can be used to dispose of the outbound mediastream.\n     */\n    async mediastream(mediastream, status) {\n        if (this.sent) {\n            throw new ResponseAlreadySentError();\n        }\n        this.sent = true;\n        this.status = status || this.status;\n        await protocol_1.HeaderProtocol.writeResponseHeader(this.stream, {\n            status: this.status,\n            headers: this.headers\n        });\n        await protocol_1.BodyProtocol.writeMediaStream(this.stream, mediastream);\n        return new MediaStreamContext(this.stream);\n    }\n    /** Streams a readable as the body of the response. */\n    async readable(readable, status) {\n        if (this.sent) {\n            throw new ResponseAlreadySentError();\n        }\n        this.sent = true;\n        this.status = status || this.status;\n        await protocol_1.HeaderProtocol.writeResponseHeader(this.stream, {\n            status: this.status,\n            headers: this.headers\n        });\n        await protocol_1.BodyProtocol.writeReadable(this.stream, readable);\n        await this.stream.writable.close();\n    }\n    /** Streams a queryable as the body of the response. */\n    async query(queryable, status) {\n        if (this.sent) {\n            throw new ResponseAlreadySentError();\n        }\n        this.sent = true;\n        this.status = status || this.status;\n        await protocol_1.HeaderProtocol.writeResponseHeader(this.stream, {\n            status: this.status,\n            headers: this.headers\n        });\n        await protocol_1.BodyProtocol.writeQueryable(this.stream, queryable);\n        await this.stream.writable.close();\n    }\n    /** Sends a buffer response. */\n    async buffer(buffer, status) {\n        const queue = [buffer];\n        return this.readable(new streams_1.Readable({\n            pull: async (controller) => {\n                if (queue.length > 0) {\n                    controller.enqueue(queue.shift());\n                }\n                else {\n                    controller.close();\n                }\n            }\n        }), status);\n    }\n    /** Sends a string or buffer data response. */\n    async send(data, status) {\n        return this.buffer(buffer_1.Buffer.from(data), status);\n    }\n    /** Sends a TEXT response with Content-Type 'text/plain' */\n    async text(data, status) {\n        this.headers['Content-Type'] = 'text/plain';\n        return this.buffer(buffer_1.Buffer.from(data), status);\n    }\n    /** Sends a JSON response with Content-Type 'application/json' */\n    async json(data, status) {\n        this.headers['Content-Type'] = 'application/json';\n        const buffer = buffer_1.Buffer.from(JSON.stringify(data));\n        return this.buffer(buffer, status);\n    }\n}\nexports.RestResponse = RestResponse;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/rest/server/response.js?");

/***/ }),

/***/ "../smoke-node/public/bin/rest/server/router.js":
/*!******************************************************!*\
  !*** ../smoke-node/public/bin/rest/server/router.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (C) 2013 Bjørge Næss - https://github.com/bjoerge/route-pattern\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst querystring_1 = __webpack_require__(/*! ../../querystring */ \"../smoke-node/public/bin/querystring/index.js\");\nconst url_1 = __webpack_require__(/*! ../../url */ \"../smoke-node/public/bin/url/index.js\");\nconst middleware_1 = __webpack_require__(/*! ./middleware */ \"../smoke-node/public/bin/rest/server/middleware.js\");\nconst pattern_1 = __webpack_require__(/*! ./pattern */ \"../smoke-node/public/bin/rest/server/pattern.js\");\n/**\n * A route type to service a single request endpoint.\n */\nclass Route {\n    constructor(method, pattern, middleware, handler) {\n        this.method = method;\n        this.pattern = pattern;\n        this.middleware = middleware;\n        this.handler = handler;\n    }\n    /** Runs this route. */\n    handle(request, response, next) {\n        const url = url_1.Url.parse(request.url);\n        const params = this.pattern.match(url.pathname);\n        if (params && request.method === this.method) {\n            request.params = params;\n            request.path = url.path;\n            request.query = querystring_1.QueryString.parse(request.url);\n            return middleware_1.runStack([...this.middleware], request, response, () => {\n                return this.handler(request, response);\n            });\n        }\n        next();\n    }\n}\nexports.Route = Route;\n/**\n * A REST router type. Allows for registering patterned REST endpoints. This\n * type is designed to mirror the functionality of the nodejs express router.\n * The RestServer is a subclass of this router.\n */\nclass Router {\n    constructor() {\n        this.middleware = [];\n    }\n    get(...args) {\n        return this.method.apply(this, ['get', ...args]);\n    }\n    post(...args) {\n        return this.method.apply(this, ['post', ...args]);\n    }\n    put(...args) {\n        return this.method.apply(this, ['put', ...args]);\n    }\n    patch(...args) {\n        return this.method.apply(this, ['patch', ...args]);\n    }\n    delete(...args) {\n        return this.method.apply(this, ['delete', ...args]);\n    }\n    method(...args) {\n        if (args.length === 4) {\n            const [method, endpoint, middleware, func] = args;\n            const resolved = middleware.map((m) => middleware_1.asMiddleware(m));\n            return this.use(new Route(method, new pattern_1.Pattern(endpoint), resolved, func));\n        }\n        else if (args.length === 3) {\n            const [method, endpoint, func] = args;\n            return this.use(new Route(method, new pattern_1.Pattern(endpoint), [], func));\n        }\n        throw Error('invalid argument');\n    }\n    /** Adds this middleware to this router.  */\n    use(middleware) {\n        if (typeof middleware === 'function') {\n            const handle = middleware;\n            this.middleware.push({ handle });\n        }\n        else {\n            this.middleware.push(middleware);\n        }\n        return this;\n    }\n    /** Runs this router as middleware. */\n    handle(request, response, next) {\n        middleware_1.runStack([...this.middleware], request, response, () => next());\n    }\n}\nexports.Router = Router;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/rest/server/router.js?");

/***/ }),

/***/ "../smoke-node/public/bin/rest/server/server.js":
/*!******************************************************!*\
  !*** ../smoke-node/public/bin/rest/server/server.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst sockets_1 = __webpack_require__(/*! ../../sockets */ \"../smoke-node/public/bin/sockets/index.js\");\nconst protocol_1 = __webpack_require__(/*! ../protocol */ \"../smoke-node/public/bin/rest/protocol/index.js\");\nconst request_1 = __webpack_require__(/*! ./request */ \"../smoke-node/public/bin/rest/server/request.js\");\nconst response_1 = __webpack_require__(/*! ./response */ \"../smoke-node/public/bin/rest/server/response.js\");\nconst router_1 = __webpack_require__(/*! ./router */ \"../smoke-node/public/bin/rest/server/router.js\");\nconst NETWORK_TIMEOUT = 4000;\n/**\n * A Rest server implementation fashioned on the nodejs express module.\n * This server provides route matching, middleware, and router and allows\n * for the transmission of byte data as well as MediaStream sharing using\n * response response semantics.\n */\nclass RestServer extends router_1.Router {\n    /** Creates a new instance of this server */\n    constructor(sockets, options) {\n        super();\n        this.sockets = sockets;\n        this.options = options;\n        this.options = this.options || {};\n        this.options.timeout = this.options.timeout || NETWORK_TIMEOUT;\n    }\n    /** Starts this server listening on the given port. */\n    listen(port) {\n        this.server = this.sockets.createServer(socket => this.onSocket(socket));\n        this.server.listen(port);\n        return this;\n    }\n    /** Disposes of this server. */\n    dispose() {\n        this.server.dispose();\n    }\n    /** Handles this socket as a request / response. */\n    async onSocket(socket) {\n        const stream = new sockets_1.NetworkStream(socket, this.options.timeout);\n        const response = new response_1.RestResponse(stream);\n        try {\n            const header = await protocol_1.HeaderProtocol.readRequestHeader(stream);\n            const request = new request_1.RestRequest(stream, header);\n            this.handle(request, response, () => { response.text('not found', 404); });\n        }\n        catch (error) {\n            response.text('internal server error', 500);\n        }\n    }\n}\nexports.RestServer = RestServer;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/rest/server/server.js?");

/***/ }),

/***/ "../smoke-node/public/bin/sockets/index.js":
/*!*************************************************!*\
  !*** ../smoke-node/public/bin/sockets/index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar sockets_1 = __webpack_require__(/*! ./sockets */ \"../smoke-node/public/bin/sockets/sockets.js\");\nexports.Sockets = sockets_1.Sockets;\nvar server_1 = __webpack_require__(/*! ./server */ \"../smoke-node/public/bin/sockets/server.js\");\nexports.SocketServer = server_1.SocketServer;\nvar socket_1 = __webpack_require__(/*! ./socket */ \"../smoke-node/public/bin/sockets/socket.js\");\nexports.Socket = socket_1.Socket;\nvar stream_1 = __webpack_require__(/*! ./stream */ \"../smoke-node/public/bin/sockets/stream.js\");\nexports.NetworkStream = stream_1.NetworkStream;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/sockets/index.js?");

/***/ }),

/***/ "../smoke-node/public/bin/sockets/server.js":
/*!**************************************************!*\
  !*** ../smoke-node/public/bin/sockets/server.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst socket_1 = __webpack_require__(/*! ./socket */ \"../smoke-node/public/bin/sockets/socket.js\");\n/**\n * A network socket server. Accepts incoming sockets from remote peers and\n * dispatches the incoming socket to a listen function. This server is\n * designed to function like a nodejs web socket server.\n */\nclass SocketServer {\n    constructor(net, func) {\n        this.net = net;\n        this.func = func;\n        this.listening = false;\n        this.disposed = false;\n    }\n    /** Starts this server listening on the given port.  */\n    listen(port) {\n        this.port = port.toString();\n        this.net.bindPort(this.port, channel => this.onChannel(channel));\n        this.listening = true;\n        return this;\n    }\n    /** Disposes of this server and unbinds its port. */\n    dispose() {\n        if (!this.disposed && this.listening) {\n            this.net.unbindPort(this.port);\n            this.disposed = true;\n        }\n    }\n    /** Accepts incoming channels sent from the network. */\n    async onChannel(event) {\n        const [peer, channel] = event;\n        return this.func(await socket_1.Socket.fromChannel(peer.connection, channel, peer.local, peer.remote));\n    }\n}\nexports.SocketServer = SocketServer;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/sockets/server.js?");

/***/ }),

/***/ "../smoke-node/public/bin/sockets/socket.js":
/*!**************************************************!*\
  !*** ../smoke-node/public/bin/sockets/socket.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst async_1 = __webpack_require__(/*! ../async */ \"../smoke-node/public/bin/async/index.js\");\nconst buffer_1 = __webpack_require__(/*! ../buffer */ \"../smoke-node/public/bin/buffer/index.js\");\nconst MAX_MESSAGE_SIZE = 1000000; // 1mb maximum message receive size.\nconst MAX_SEGMENT_SIZE = 32768; // 32k maximum message size.\nconst COMPLETE = 0;\nconst PARTIAL = 1;\nclass InvalidSocketMessage extends Error {\n    constructor() {\n        super('Received invalid socket message.');\n    }\n}\nexports.InvalidSocketMessage = InvalidSocketMessage;\nclass MessageSendSizeTooLarge extends Error {\n    constructor() {\n        super(`Message size exceeds ${MAX_MESSAGE_SIZE} bytes.`);\n    }\n}\nexports.MessageSendSizeTooLarge = MessageSendSizeTooLarge;\nclass MessageReceiveSizeTooLarge extends Error {\n    constructor() {\n        super(`Message received exceeded ${MAX_MESSAGE_SIZE} bytes.`);\n    }\n}\nexports.MessageReceiveSizeTooLarge = MessageReceiveSizeTooLarge;\nconst into = (func) => func();\n/**\n * A Web Socket like type built over RTCDataChannel. It supports\n * bi-directional messaging between peers within a network. This\n * socket type functions both as a Web Socket as well as a WebRTC\n * pass-through for sending and receiving MediaStream Tracks to\n * the sockets underlying RTCPeerConnection.\n */\nclass Socket extends async_1.Events {\n    constructor() {\n        super(...arguments);\n        /** RTCRTPSenders sending from this socket. */\n        this.senders = [];\n        /** A message receive buffer. */\n        this.buffers = [];\n    }\n    /** Subscribes once to events on this socket. */\n    once(event, func) {\n        super.once(event, func);\n    }\n    /** Subscribes to events on this socket. */\n    on(event, func) {\n        super.on(event, func);\n    }\n    /**\n     * Adds this mediastream track to this socket. Internally, this track\n     * is forwarded on to this sockets internal peer connection. Receiving\n     * sockets may listen for `onTrack` events negotiated somewhere outside\n     * of this implementation.\n     */\n    addTrack(track, mediastream) {\n        this.senders.push(this.connection.addTrack(track, mediastream));\n    }\n    /** Sends a message to this socket. */\n    send(message) {\n        const buffer = buffer_1.Buffer.from(message);\n        if (buffer.length > MAX_MESSAGE_SIZE) {\n            throw new MessageSendSizeTooLarge();\n        }\n        else {\n            let index = 0;\n            while (index !== buffer.length) {\n                const slice = buffer.slice(index, index + MAX_SEGMENT_SIZE);\n                index += slice.length;\n                if (index !== buffer.length) {\n                    this.channel.send(this.encode(PARTIAL, slice));\n                }\n                else {\n                    this.channel.send(this.encode(COMPLETE, slice));\n                }\n            }\n        }\n    }\n    /**\n     * Closes this socket. Will also remove any RTCRtpSender tracks that were\n     * sent through this socket.\n     */\n    close() {\n        while (this.senders.length > 0) {\n            const sender = this.senders.shift();\n            this.connection.removeTrack(sender);\n        }\n        this.channel.close();\n    }\n    encode(type, data = buffer_1.Buffer.alloc(0)) {\n        return buffer_1.Buffer.concat([buffer_1.Buffer.from([type]), data]);\n    }\n    decode(data) {\n        const buffer = buffer_1.Buffer.from(data);\n        return [buffer.readInt8(0), buffer.slice(1)];\n    }\n    /**\n     * Sets up the events for this socket. Socket messages support partial sends\n     * of message payloads, the following logic buffers and emits only on\n     * receiving COMPLETE signals from the sender.\n     */\n    setupEvents() {\n        this.connection.addEventListener('track', event => this.emit('track', event));\n        this.channel.addEventListener('error', event => this.emit('error', event));\n        this.channel.addEventListener('close', event => this.emit('close', event));\n        this.channel.addEventListener('message', event => {\n            const [type, buffer] = this.decode(event.data);\n            this.buffers.push(buffer);\n            const buffered = this.buffers.reduce((acc, c) => acc + c.length, 0);\n            if (buffered > MAX_MESSAGE_SIZE) {\n                this.emit('error', new MessageReceiveSizeTooLarge());\n                this.close();\n            }\n            switch (type) {\n                case COMPLETE: {\n                    const data = buffer_1.Buffer.concat(this.buffers);\n                    this.emit('message', { data });\n                    this.buffers = [];\n                    break;\n                }\n                case PARTIAL: {\n                    break;\n                }\n                default: {\n                    this.emit('error', new InvalidSocketMessage());\n                    this.close();\n                    break;\n                }\n            }\n        });\n    }\n    /**\n     * Creates a socket from a data channel sent from the network device. Used by\n     * the socket server to initialize new sockets on listen events.\n     */\n    static async fromChannel(connection, channel, local, remote) {\n        channel.binaryType = 'arraybuffer';\n        const socket = new Socket();\n        socket.connection = connection;\n        socket.channel = channel;\n        socket.remote = remote;\n        socket.local = local;\n        socket.buffers = [];\n        socket.setupEvents();\n        return socket;\n    }\n    /**\n     * Creates a web socket to the remote host and port. This function lazily\n     * initializes the underlying socket. Callers should wait for the open event\n     * to fire before interacting with this socket.\n     */\n    static createSocket(net, remote, port) {\n        const socket = new Socket();\n        into(async () => {\n            try {\n                const [peer, channel] = await net.connect(remote, port);\n                socket.connection = peer.connection;\n                socket.channel = channel;\n                socket.setupEvents();\n                socket.emit('open');\n            }\n            catch (error) {\n                socket.emit('error', error);\n                socket.emit('close');\n            }\n        });\n        return socket;\n    }\n}\nexports.Socket = Socket;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/sockets/socket.js?");

/***/ }),

/***/ "../smoke-node/public/bin/sockets/sockets.js":
/*!***************************************************!*\
  !*** ../smoke-node/public/bin/sockets/sockets.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst socket_1 = __webpack_require__(/*! ./socket */ \"../smoke-node/public/bin/sockets/socket.js\");\nconst server_1 = __webpack_require__(/*! ./server */ \"../smoke-node/public/bin/sockets/server.js\");\n/**\n * A Web Socket emulation context. Allows one to create\n * Rtc socket hosts and functionality to connect to them\n * across a peer network. Sockets created by this type\n * are fully duplex and mirror the same functionality\n * as standard Web Sockets.\n */\nclass Sockets {\n    constructor(net) {\n        this.net = net;\n        this.servers = [];\n    }\n    /** Creates Rtc socket server for remote sockets to connect to. */\n    createServer(func) {\n        const server = new server_1.SocketServer(this.net, func);\n        this.servers.push(server);\n        return server;\n    }\n    /** Connects to a remote Rtc socket host.*/\n    connect(remote, port) {\n        return socket_1.Socket.createSocket(this.net, remote, port.toString());\n    }\n    /** Disposes of this Rtc context */\n    dispose() {\n        while (this.servers.length > 0) {\n            const server = this.servers.shift();\n            server.dispose();\n        }\n    }\n}\nexports.Sockets = Sockets;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/sockets/sockets.js?");

/***/ }),

/***/ "../smoke-node/public/bin/sockets/stream.js":
/*!**************************************************!*\
  !*** ../smoke-node/public/bin/sockets/stream.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst buffer_1 = __webpack_require__(/*! ../buffer */ \"../smoke-node/public/bin/buffer/index.js\");\nconst async_1 = __webpack_require__(/*! ../async */ \"../smoke-node/public/bin/async/index.js\");\nconst streams_1 = __webpack_require__(/*! ../streams */ \"../smoke-node/public/bin/streams/index.js\");\nconst NEXT = 0;\nconst CANCEL = 1;\nconst DATA = 2;\nconst ERROR = 3;\nconst END = 4;\n/**\n * An asynchronous network stream. This type layers a Socket and splits it into\n * a readable and writable pair. The NetworkStream internally implements\n * bi-directional PULL semantics over the socket via a messaging protocol so\n * both sender and receiver sockets should be wrapped as NetworkStream to enable\n * protocol read/write for the socket. The readable side of this network stream\n * is async iterable over the network using these PULL semantics. The\n * NetworkStream will manage timeouts over the network which may occur on both\n * read and writing ends of the stream.\n */\nclass NetworkStream {\n    /** Creates a NetworkStream from the given Socket. */\n    constructor(socket, timeout = 8000) {\n        this.socket = socket;\n        this.timeout = timeout;\n        // readable\n        this.read_buffer = [];\n        this.read_barrier = new async_1.Barrier();\n        this.readable = new streams_1.Readable({\n            cancel: () => this.push(CANCEL),\n            pull: async (controller) => {\n                this.push(NEXT);\n                await this.read_barrier.run(() => {\n                    this.read_barrier.pause();\n                    const [type, buffer] = this.read_buffer.shift();\n                    try {\n                        switch (type) {\n                            case DATA: return controller.enqueue(buffer);\n                            case END: return controller.close();\n                            case ERROR: throw new Error(buffer.toString());\n                            default: throw new Error(`Readable receive invalid header. ${type}`);\n                        }\n                    }\n                    catch (error) {\n                        return controller.error(error);\n                    }\n                });\n            }\n        });\n        // setup writable\n        this.write_buffer = [];\n        this.write_barrier = new async_1.Barrier();\n        this.writable = new streams_1.Writable({\n            write: async (buffer) => {\n                const [type] = await this.next();\n                switch (type) {\n                    case CANCEL: throw Error('Readable cancelled');\n                    case NEXT: return this.push(DATA, buffer);\n                }\n            },\n            abort: async (error) => {\n                const [type] = await this.next();\n                switch (type) {\n                    case CANCEL: throw Error('Readable cancelled');\n                    case NEXT: return this.push(ERROR, buffer_1.Buffer.from(error.message));\n                }\n            },\n            close: async () => {\n                const [type] = await this.next();\n                switch (type) {\n                    case CANCEL: throw Error('Readable cancelled');\n                    case NEXT: return this.push(END);\n                }\n            }\n        });\n        // start message loop\n        this.readInternal();\n    }\n    /** Waits for the NEXT or CANCEL signal from remote. */\n    next() {\n        return new Promise((resolve, reject) => {\n            const handle = setTimeout(() => {\n                reject(new Error('Network send timeout.'));\n                this.socket.close();\n            }, this.timeout);\n            return this.write_barrier.run(() => {\n                clearTimeout(handle);\n                this.write_barrier.pause();\n                const next = this.write_buffer.shift();\n                resolve(next);\n            });\n        });\n    }\n    /** Pushes data to the network. */\n    push(type, data = buffer_1.Buffer.alloc(0)) {\n        this.socket.send(buffer_1.Buffer.concat([\n            buffer_1.Buffer.from([type]),\n            buffer_1.Buffer.from(data)\n        ]));\n    }\n    /**\n     * Pulls data from the network. This function always resolves with a 'Read'\n     * tuple indicating the result of that read. The result given here is used\n     * by the 'readInternal()' function to unlock read / write barriers for\n     * processing, and for loop termination.\n     */\n    pull() {\n        return new Promise(resolve => {\n            setTimeout(() => resolve([ERROR, buffer_1.Buffer.from('Network receive timeout.')]), this.timeout);\n            this.socket.once('error', () => resolve([ERROR, buffer_1.Buffer.from('NetworkStream Socket encounted error.')]));\n            this.socket.once('close', () => resolve([END, buffer_1.Buffer.alloc(0)]));\n            this.socket.once('message', message => {\n                const buffer = buffer_1.Buffer.from(message.data);\n                const type = buffer.readInt8(0);\n                const data = buffer.slice(1);\n                switch (type) {\n                    case NEXT: return resolve([NEXT, buffer_1.Buffer.alloc(0)]);\n                    case CANCEL: return resolve([CANCEL, buffer_1.Buffer.alloc(0)]);\n                    case DATA: return resolve([DATA, data]);\n                    case ERROR: return resolve([ERROR, data]);\n                    case END: return resolve([END, buffer_1.Buffer.alloc(0)]);\n                    default: return resolve([ERROR, buffer_1.Buffer.from('NetworkStream Socket sent unknown message header.')]);\n                }\n            });\n        });\n    }\n    /**\n     * An internal event loop that reads messages from the network, and unlocks\n     * read / write barriers. This function is the main driving logic for the\n     * readable and writable instances of this stream, where operations are\n     * locked until a network message unlocks them (via resume). This function\n     * is also responsible for closing the underlying connection.\n     */\n    async readInternal() {\n        let running = true;\n        while (running) {\n            const next = await this.pull();\n            switch (next[0]) {\n                // from: readable\n                case NEXT: {\n                    this.write_buffer.push(next);\n                    this.write_barrier.resume();\n                    break;\n                }\n                case CANCEL: {\n                    this.write_buffer.push(next);\n                    this.write_barrier.resume();\n                    running = false;\n                    break;\n                }\n                // from: writable\n                case DATA: {\n                    this.read_buffer.push(next);\n                    this.read_barrier.resume();\n                    break;\n                }\n                case END: {\n                    this.read_buffer.push(next);\n                    this.read_barrier.resume();\n                    running = false;\n                    break;\n                }\n                case ERROR: {\n                    this.read_buffer.push(next);\n                    this.read_barrier.resume();\n                    running = false;\n                    break;\n                }\n            }\n        }\n        this.socket.close();\n    }\n}\nexports.NetworkStream = NetworkStream;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/sockets/stream.js?");

/***/ }),

/***/ "../smoke-node/public/bin/streams/index.js":
/*!*************************************************!*\
  !*** ../smoke-node/public/bin/streams/index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar writable_1 = __webpack_require__(/*! ./writable */ \"../smoke-node/public/bin/streams/writable.js\");\nexports.Writable = writable_1.Writable;\nvar readable_1 = __webpack_require__(/*! ./readable */ \"../smoke-node/public/bin/streams/readable.js\");\nexports.Readable = readable_1.Readable;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/streams/index.js?");

/***/ }),

/***/ "../smoke-node/public/bin/streams/readable.js":
/*!****************************************************!*\
  !*** ../smoke-node/public/bin/streams/readable.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass ReadableAsyncIterator {\n    constructor(readable) {\n        this.readable = readable;\n    }\n    async next() {\n        return this.readable.read();\n    }\n}\nexports.ReadableAsyncIterator = ReadableAsyncIterator;\n/**\n * An asynchronous pull based readable stream with asyncIterator support.\n */\nclass Readable {\n    /** Creates a new Readable from the given UnderlyingSource<T>. */\n    constructor(source) {\n        this.stream = new ReadableStream(source);\n        this.reader = this.stream.getReader();\n    }\n    /** Implements the IAsyncIterator protocol. */\n    [Symbol.asyncIterator]() {\n        return new ReadableAsyncIterator(this);\n    }\n    /** Reads the next 'result' from the underlying stream. */\n    async read() {\n        return this.reader.read();\n    }\n    /** Cancels reading from this readable. */\n    cancel() {\n        return this.reader.cancel();\n    }\n    /**\n     * Pipes from this reading into the given writable target. This\n     * function does not support chaining pipe operations.\n     */\n    async pipe(writable) {\n        while (true) {\n            const { done, value } = await this.read();\n            if (done) {\n                return writable.close();\n            }\n            try {\n                await writable.write(value);\n            }\n            catch (error) {\n                await writable.abort(error);\n                throw error;\n            }\n        }\n    }\n}\nexports.Readable = Readable;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/streams/readable.js?");

/***/ }),

/***/ "../smoke-node/public/bin/streams/writable.js":
/*!****************************************************!*\
  !*** ../smoke-node/public/bin/streams/writable.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst async_1 = __webpack_require__(/*! ../async */ \"../smoke-node/public/bin/async/index.js\");\n/**\n * Provides an asynchronous Writable abstraction over streams. This type is\n * used as a sender for Readable<T> and also provides hooks for the\n * WritableStream<T> type that is currently pending implementation in\n * Firefox.\n */\nclass Writable {\n    constructor(sink) {\n        this.sink = sink;\n        this.controller = {};\n        this.semaphore = new async_1.Semaphore(1);\n        this.start();\n    }\n    /** Starts this writable. */\n    async start() {\n        if (this.sink.start) {\n            try {\n                await this.semaphore.run(() => this.sink.start(this.controller));\n            }\n            catch (error) {\n                this.error = error;\n                throw error;\n            }\n        }\n    }\n    /** Writes this value to the stream. */\n    async write(data) {\n        if (this.error !== undefined) {\n            throw this.error;\n        }\n        if (this.sink.write) {\n            try {\n                await this.semaphore.run(() => this.sink.write(data, this.controller));\n            }\n            catch (error) {\n                this.error = error;\n                throw error;\n            }\n        }\n    }\n    /** Aborts this stream with an error.. */\n    async abort(error = new Error('abort')) {\n        if (this.error !== undefined) {\n            throw this.error;\n        }\n        if (this.sink.abort) {\n            try {\n                await this.semaphore.run(() => this.sink.abort(error));\n            }\n            catch (error) {\n                this.error = error;\n                throw error;\n            }\n        }\n    }\n    /** Closes this stream. */\n    async close() {\n        if (this.error !== undefined) {\n            throw this.error;\n        }\n        if (this.sink.close) {\n            try {\n                await this.semaphore.run(() => this.sink.close());\n            }\n            catch (error) {\n                this.error = error;\n                throw error;\n            }\n        }\n    }\n}\nexports.Writable = Writable;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/streams/writable.js?");

/***/ }),

/***/ "../smoke-node/public/bin/system/index.js":
/*!************************************************!*\
  !*** ../smoke-node/public/bin/system/index.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar system_1 = __webpack_require__(/*! ./system */ \"../smoke-node/public/bin/system/system.js\");\nexports.System = system_1.System;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/system/index.js?");

/***/ }),

/***/ "../smoke-node/public/bin/system/system.js":
/*!*************************************************!*\
  !*** ../smoke-node/public/bin/system/system.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * This type provides high level system information the user agent, storage\n * capabilities and network stats. Information given by this type may vary\n * on user agent basis.\n */\nclass System {\n    constructor(net) {\n        this.net = net;\n        this.started = new Date();\n    }\n    /** Returns the system uptime in milliseconds. */\n    uptime() {\n        const started = this.started.getTime();\n        const now = Date.now();\n        return now - started;\n    }\n    /** Returns a single netstat object from the given peer. */\n    async getNetStat(peer) {\n        const local = peer.local;\n        const remote = peer.remote;\n        const loopback = peer.loopback;\n        const transceivers = peer.connection.getTransceivers().length;\n        const senders = peer.connection.getSenders().length;\n        const stats = await peer.connection.getStats();\n        const info = {};\n        stats.forEach(value => {\n            Object.keys(value).forEach(key => { info[key] = value[key]; });\n        });\n        return { local, remote, loopback, transceivers, senders, ...info };\n    }\n    /** Returns network statistics. */\n    async netstat() {\n        const peers = this.net.getPeers();\n        const stats = [];\n        for (const key of peers.keys()) {\n            const peer = peers.get(key);\n            const stat = await this.getNetStat(peer);\n            stats.push(stat);\n        }\n        return stats;\n    }\n}\nexports.System = System;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/system/system.js?");

/***/ }),

/***/ "../smoke-node/public/bin/url/index.js":
/*!*********************************************!*\
  !*** ../smoke-node/public/bin/url/index.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar url_1 = __webpack_require__(/*! ./url */ \"../smoke-node/public/bin/url/url.js\");\nexports.Url = url_1.Url;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/url/index.js?");

/***/ }),

/***/ "../smoke-node/public/bin/url/url.js":
/*!*******************************************!*\
  !*** ../smoke-node/public/bin/url/url.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*--------------------------------------------------------------------------\n\nsmoke-node\n\nThe MIT License (MIT)\n\nCopyright (c) 2019 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Url parsing utility. Allows for arbituary protocols to be\n * parsed into standard URLObject types.\n */\nclass Url {\n    /** Parses the `protocol` from this `href`. Throws if error. */\n    static parseProtocol(href) {\n        for (let i = 0; i < href.length; i++) {\n            if (href.charAt(i) === ':') {\n                const next0 = href.charAt(i + 1);\n                const next1 = href.charAt(i + 2);\n                if (next0 === '/' && next1 === '/') {\n                    return [href.slice(0, i + 1), href.slice(i + 3)];\n                }\n            }\n        }\n        return [null, href];\n    }\n    /** Parses the `auth` from `protocol` remainder. Returns `null` on not found. */\n    static parseAuth(s) {\n        for (let i = 0; i < s.length; i++) {\n            if (s.charAt(i) === '/') {\n                return [null, s];\n            }\n            if (s.charAt(i) === '@') {\n                return [s.slice(0, i), s.slice(i + 1)];\n            }\n        }\n        return [null, s];\n    }\n    /** Parses the `hostname`. Terminates at `/` | `?` | `#` */\n    static parseHostname(s) {\n        for (let i = 0; i < s.length; i++) {\n            const next = s.charAt(i);\n            if (next === '/' || next === '?' || next === '#') {\n                return [s.slice(0, i), s.slice(i)];\n            }\n        }\n        return [s, ''];\n    }\n    /** Parses the `host` form the `hostname`. */\n    static parseHost(hostname) {\n        for (let i = 0; i < hostname.length; i++) {\n            const next = hostname.charAt(i);\n            if (next === ':') {\n                return [hostname.slice(0, i), hostname.slice(i)];\n            }\n        }\n        return [hostname, ''];\n    }\n    /** Parses the `port` form the `hostname`. Returns `null` on not found. */\n    static parsePort(hostname) {\n        for (let i = 0; i < hostname.length; i++) {\n            if (hostname.charAt(i) === ':') {\n                return [hostname.slice(i + 1), ''];\n            }\n        }\n        return [null, hostname];\n    }\n    /** Parses the `path` component. Adds forward '/' on path if non found. */\n    static parsePath(s) {\n        if (s.length === 0) {\n            return ['/', ''];\n        }\n        return [s, ''];\n    }\n    /** Parses the `pathname` from the `path` component.*/\n    static parsePathname(path) {\n        for (let i = 0; i < path.length; i++) {\n            const next = path.charAt(i);\n            if (next === '?' || next === '#') {\n                return [path.slice(0, i), path.slice(i)];\n            }\n        }\n        return [path, ''];\n    }\n    /**\n     * Parses the `hash` from the `path` component. Returns left side as\n     * remainder as `hash` can only be at the end of the href and `hash`\n     * will consume all things to the right, including `search`\n     */\n    static parseHash(path) {\n        for (let i = 0; i < path.length; i++) {\n            const next = path.charAt(i);\n            if (next === '#') {\n                return [path.slice(i), path.slice(0, i)];\n            }\n        }\n        return [null, path];\n    }\n    /** Parses the `search` from this path. */\n    static parseSearch(path) {\n        for (let i = 0; i < path.length; i++) {\n            const next = path.charAt(i);\n            if (next === '?') {\n                return [path.slice(i), path.slice(0, i)];\n            }\n        }\n        return ['', path];\n    }\n    /** Parses the `query` from this `search`. */\n    static parseQuery(search) {\n        for (let i = 0; i < search.length; i++) {\n            const next = search.charAt(i);\n            if (next === '?') {\n                return [search.slice(i + 1), search.slice(0, i)];\n            }\n        }\n        return ['', search];\n    }\n    /** Parses this `href` as a UrlObject. Will throw on error. */\n    static parse(href) {\n        const [protocol, r0] = this.parseProtocol(href);\n        if (protocol) {\n            const [auth, r1] = this.parseAuth(r0);\n            const [hostname, r2] = this.parseHostname(r1);\n            const [host, r3] = this.parseHost(hostname);\n            const [port, r4] = this.parsePort(hostname);\n            const [path, r5] = this.parsePath(r2);\n            const [pathname, r6] = this.parsePathname(path);\n            const [hash, r7] = this.parseHash(path);\n            const [search, r8] = this.parseSearch(r7); // left side of hash\n            const [query, r9] = this.parseQuery(search);\n            return { protocol, auth, hash, host, hostname, href, path, pathname, port, query, search };\n        }\n        else {\n            const auth = null;\n            const hostname = null;\n            const host = null;\n            const port = null;\n            const [path, r5] = this.parsePath(r0);\n            const [pathname, r6] = this.parsePathname(path);\n            const [hash, r7] = this.parseHash(path);\n            const [search, r8] = this.parseSearch(r7); // left side of hash\n            const [query, r9] = this.parseQuery(search);\n            return { protocol, auth, hash, host, hostname, href, path, pathname, port, query, search };\n        }\n    }\n}\nexports.Url = Url;\n\n\n//# sourceURL=webpack:///../smoke-node/public/bin/url/url.js?");

/***/ }),

/***/ "./src/program/index.ts":
/*!******************************!*\
  !*** ./src/program/index.ts ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst smoke_node_1 = __webpack_require__(/*! smoke-node */ \"../smoke-node/public/bin/index.js\");\nconst node0 = new smoke_node_1.Node({ hub: new smoke_node_1.NetworkHub(\"ws://localhost:5001\") });\nconst server = node0.rest.createServer();\nserver.get('/api', (req, res) => {\n    res.send('hello world!');\n}).listen(80);\n(async () => {\n    const address = await node0.address();\n    const node = new smoke_node_1.Node({ hub: new smoke_node_1.NetworkHub(\"ws://localhost:5001\") });\n    const text = await node.rest.fetch(`rest://${address}/api`).then(res => res.text());\n    console.log(text);\n})();\n\n\n//# sourceURL=webpack:///./src/program/index.ts?");

/***/ })

/******/ });